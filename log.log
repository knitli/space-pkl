[2m2025-05-30T15:38:29.329252Z[0m [32m INFO[0m Generating project schema
[2m2025-05-30T15:38:29.329422Z[0m [34mDEBUG[0m Generating project schema
[2m2025-05-30T15:38:29.332481Z[0m [34mDEBUG[0m Converting schema 'DependencyScope' of type: Enum(EnumType { default_index: Some(3), values: [String("build"), String("development"), String("peer"), String("production"), String("root")], variants: Some({"Build": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("build") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Development": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("development") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Peer": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("peer") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Production": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("production") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Root": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("root") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) })
[2m2025-05-30T15:38:29.332699Z[0m [34mDEBUG[0m Created enum typealias 'DependencyScope' with values: "build" | "development" | "peer" | "production" | "root"
[2m2025-05-30T15:38:29.332723Z[0m [34mDEBUG[0m Final PklType for 'DependencyScope': kind=TypeAlias, properties=0, enum_values=Some("\"build\" | \"development\" | \"peer\" | \"production\" | \"root\"")
[2m2025-05-30T15:38:29.332743Z[0m [34mDEBUG[0m Converting schema 'DependencySource' of type: Enum(EnumType { default_index: Some(0), values: [String("explicit"), String("implicit")], variants: Some({"Explicit": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("explicit") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Implicit": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("implicit") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) })
[2m2025-05-30T15:38:29.332764Z[0m [34mDEBUG[0m Created enum typealias 'DependencySource' with values: "explicit" | "implicit"
[2m2025-05-30T15:38:29.332772Z[0m [34mDEBUG[0m Final PklType for 'DependencySource': kind=TypeAlias, properties=0, enum_values=Some("\"explicit\" | \"implicit\"")
[2m2025-05-30T15:38:29.332782Z[0m [34mDEBUG[0m Converting schema 'DependencyConfig' of type: Struct(StructType { fields: {"id": SchemaField { comment: Some("ID of the depended on project."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "scope": SchemaField { comment: Some("Scope of the dependency relationship."), schema: Schema { deprecated: None, description: Some("The scope and or relationship of the dependency."), name: Some("DependencyScope"), nullable: false, ty: Enum(EnumType { default_index: Some(3), values: [String("build"), String("development"), String("peer"), String("production"), String("root")], variants: Some({"Build": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("build") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Development": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("development") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Peer": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("peer") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Production": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("production") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Root": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("root") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "source": SchemaField { comment: Some("Source of where the dependency came from."), schema: Schema { deprecated: None, description: Some("The source where the dependency comes from. Either explicitly\ndefined in configuration, or implicitly derived from source files."), name: Some("DependencySource"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("explicit"), String("implicit")], variants: Some({"Explicit": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("explicit") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Implicit": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("implicit") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "via": SchemaField { comment: Some("Metadata about the source."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None })
[2m2025-05-30T15:38:29.332889Z[0m [34mDEBUG[0m Created struct class 'DependencyConfig' with 4 properties
[2m2025-05-30T15:38:29.332902Z[0m [34mDEBUG[0m Final PklType for 'DependencyConfig': kind=Class, properties=4, enum_values=None
[2m2025-05-30T15:38:29.332926Z[0m [34mDEBUG[0m Converting schema 'ProjectDependsOn' of type: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: Some("Expanded information about a project dependency."), name: Some("DependencyConfig"), nullable: false, ty: Struct(StructType { fields: {"id": SchemaField { comment: Some("ID of the depended on project."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "scope": SchemaField { comment: Some("Scope of the dependency relationship."), schema: Schema { deprecated: None, description: Some("The scope and or relationship of the dependency."), name: Some("DependencyScope"), nullable: false, ty: Enum(EnumType { default_index: Some(3), values: [String("build"), String("development"), String("peer"), String("production"), String("root")], variants: Some({"Build": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("build") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Development": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("development") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Peer": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("peer") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Production": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("production") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Root": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("root") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "source": SchemaField { comment: Some("Source of where the dependency came from."), schema: Schema { deprecated: None, description: Some("The source where the dependency comes from. Either explicitly\ndefined in configuration, or implicitly derived from source files."), name: Some("DependencySource"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("explicit"), String("implicit")], variants: Some({"Explicit": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("explicit") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Implicit": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("implicit") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "via": SchemaField { comment: Some("Metadata about the source."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }] })
[2m2025-05-30T15:38:29.333009Z[0m [34mDEBUG[0m Created union typealias 'ProjectDependsOn' with types: String | DependencyConfig
[2m2025-05-30T15:38:29.333025Z[0m [34mDEBUG[0m Union type for ProjectDependsOn: String | DependencyConfig
[2m2025-05-30T15:38:29.333035Z[0m [34mDEBUG[0m Final PklType for 'ProjectDependsOn': kind=TypeAlias, properties=0, enum_values=Some("String | DependencyConfig")
[2m2025-05-30T15:38:29.333050Z[0m [34mDEBUG[0m Converting schema 'ProjectDockerFileConfig' of type: Struct(StructType { fields: {"buildTask": SchemaField { comment: Some("A task within the current project for building the project."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "image": SchemaField { comment: Some("The base Docker image."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "startTask": SchemaField { comment: Some("A task within the current project for starting the project."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None })
[2m2025-05-30T15:38:29.333125Z[0m [34mDEBUG[0m Created struct class 'ProjectDockerFileConfig' with 3 properties
[2m2025-05-30T15:38:29.333156Z[0m [34mDEBUG[0m Final PklType for 'ProjectDockerFileConfig': kind=Class, properties=3, enum_values=None
[2m2025-05-30T15:38:29.333175Z[0m [34mDEBUG[0m Converting schema 'ProjectDockerScaffoldConfig' of type: Struct(StructType { fields: {"include": SchemaField { comment: Some("List of glob patterns, relative from the project root,\nto include (or exclude) in the sources skeleton."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}, partial: true, required: None })
[2m2025-05-30T15:38:29.333213Z[0m [34mDEBUG[0m Created struct class 'ProjectDockerScaffoldConfig' with 1 properties
[2m2025-05-30T15:38:29.333223Z[0m [34mDEBUG[0m Final PklType for 'ProjectDockerScaffoldConfig': kind=Class, properties=1, enum_values=None
[2m2025-05-30T15:38:29.333235Z[0m [34mDEBUG[0m Converting schema 'ProjectDockerConfig' of type: Struct(StructType { fields: {"file": SchemaField { comment: Some("Configures aspects of the `Dockerfile` generation process."), schema: Schema { deprecated: None, description: Some("Configures `Dockerfile` generation."), name: Some("ProjectDockerFileConfig"), nullable: false, ty: Struct(StructType { fields: {"buildTask": SchemaField { comment: Some("A task within the current project for building the project."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "image": SchemaField { comment: Some("The base Docker image."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "startTask": SchemaField { comment: Some("A task within the current project for starting the project."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "scaffold": SchemaField { comment: Some("Configures aspects of the Docker scaffolding process."), schema: Schema { deprecated: None, description: Some("Configures aspects of the Docker scaffolding process."), name: Some("ProjectDockerScaffoldConfig"), nullable: false, ty: Struct(StructType { fields: {"include": SchemaField { comment: Some("List of glob patterns, relative from the project root,\nto include (or exclude) in the sources skeleton."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}, partial: true, required: None })
[2m2025-05-30T15:38:29.333309Z[0m [34mDEBUG[0m Created struct class 'ProjectDockerConfig' with 2 properties
[2m2025-05-30T15:38:29.333320Z[0m [34mDEBUG[0m Final PklType for 'ProjectDockerConfig': kind=Class, properties=2, enum_values=None
[2m2025-05-30T15:38:29.333335Z[0m [34mDEBUG[0m Converting schema 'LanguageType' of type: Enum(EnumType { default_index: Some(9), values: [String("bash"), String("batch"), String("go"), String("javascript"), String("php"), String("python"), String("ruby"), String("rust"), String("typescript"), String("unknown")], variants: Some({"Bash": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("bash") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Batch": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("batch") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Go": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("go") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "JavaScript": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("javascript") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Php": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("php") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Python": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("python") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Ruby": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("ruby") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Rust": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("rust") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "TypeScript": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("typescript") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Unknown": SchemaField { comment: Some("Not explicitly set or detected."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("unknown") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Other": SchemaField { comment: Some("An unsupported language."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) })
[2m2025-05-30T15:38:29.333390Z[0m [34mDEBUG[0m Created enum typealias 'LanguageType' with values: "bash" | "batch" | "go" | "javascript" | "php" | "python" | "ruby" | "rust" | "typescript" | "unknown"
[2m2025-05-30T15:38:29.333400Z[0m [34mDEBUG[0m Final PklType for 'LanguageType': kind=TypeAlias, properties=0, enum_values=Some("\"bash\" | \"batch\" | \"go\" | \"javascript\" | \"php\" | \"python\" | \"ruby\" | \"rust\" | \"typescript\" | \"unknown\"")
[2m2025-05-30T15:38:29.333415Z[0m [34mDEBUG[0m Converting schema 'OwnersPaths' of type: Union(UnionType { default_index: Some(0), partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) } }) }] })
[2m2025-05-30T15:38:29.333445Z[0m [34mDEBUG[0m Created union typealias 'OwnersPaths' with types: Listing<String> | Mapping<String, Listing<String>>
[2m2025-05-30T15:38:29.333456Z[0m [34mDEBUG[0m Union type for OwnersPaths: Listing<String> | Mapping<String, Listing<String>>
[2m2025-05-30T15:38:29.333464Z[0m [34mDEBUG[0m Final PklType for 'OwnersPaths': kind=TypeAlias, properties=0, enum_values=Some("Listing<String> | Mapping<String, Listing<String>>")
[2m2025-05-30T15:38:29.333477Z[0m [34mDEBUG[0m Converting schema 'OwnersConfig' of type: Struct(StructType { fields: {"customGroups": SchemaField { comment: Some("Bitbucket only. A mapping of custom groups (prefixed with `@@@`),\nto a list of user and normal groups."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "defaultOwner": SchemaField { comment: Some("The default owner for `paths`."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "optional": SchemaField { comment: Some("GitLab only. Marks the code owners section as optional."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "paths": SchemaField { comment: Some("A mapping of file paths and file globs to owners.\nWhen a list, the `defaultOwner` is the owner, and each item is a path.\nWhen an object, the key is a path, and the value is a list of owners."), schema: Schema { deprecated: None, description: Some("A mapping of file paths and file globs to owners."), name: Some("OwnersPaths"), nullable: false, ty: Union(UnionType { default_index: Some(0), partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) } }) }] }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "requiredApprovals": SchemaField { comment: Some("Bitbucket and GitLab only. The number of approvals required for the\nrequest to be satisfied. For Bitbucket, utilizes the `Check()` condition.\nFor GitLab, marks the code owners section as required."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Integer(IntegerType { default: None, enum_values: None, format: None, kind: U8, max: None, max_exclusive: None, min: None, min_exclusive: None, multiple_of: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None })
[2m2025-05-30T15:38:29.333575Z[0m [34mDEBUG[0m Created struct class 'OwnersConfig' with 5 properties
[2m2025-05-30T15:38:29.333593Z[0m [34mDEBUG[0m Final PklType for 'OwnersConfig': kind=Class, properties=5, enum_values=None
[2m2025-05-30T15:38:29.333608Z[0m [34mDEBUG[0m Converting schema 'PlatformType' of type: Enum(EnumType { default_index: Some(6), values: [String("bun"), String("deno"), String("node"), String("python"), String("rust"), String("system"), String("unknown")], variants: Some({"Bun": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("bun") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Deno": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("deno") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Node": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("node") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Python": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("python") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Rust": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("rust") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "System": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("system") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Unknown": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("unknown") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) })
[2m2025-05-30T15:38:29.333664Z[0m [34mDEBUG[0m Created enum typealias 'PlatformType' with values: "bun" | "deno" | "node" | "python" | "rust" | "system" | "unknown"
[2m2025-05-30T15:38:29.333692Z[0m [34mDEBUG[0m Final PklType for 'PlatformType': kind=TypeAlias, properties=0, enum_values=Some("\"bun\" | \"deno\" | \"node\" | \"python\" | \"rust\" | \"system\" | \"unknown\"")
[2m2025-05-30T15:38:29.333707Z[0m [34mDEBUG[0m Converting schema 'ProjectMetadataConfig' of type: Struct(StructType { fields: {"channel": SchemaField { comment: Some("The Slack, Discord, etc, channel to discuss the project.\nMust start with a `#`."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "description": SchemaField { comment: Some("A description on what the project does, and why it exists."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "maintainers": SchemaField { comment: Some("The individual maintainers of the project. The format is unspecified."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "metadata": SchemaField { comment: Some("Custom metadata fields."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Unknown } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "name": SchemaField { comment: Some("A human-readable name of the project."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "owner": SchemaField { comment: Some("The owner of the project. Can be an individual, team, or\norganization. The format is unspecified."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None })
[2m2025-05-30T15:38:29.333795Z[0m [34mDEBUG[0m Created struct class 'ProjectMetadataConfig' with 6 properties
[2m2025-05-30T15:38:29.333835Z[0m [34mDEBUG[0m Final PklType for 'ProjectMetadataConfig': kind=Class, properties=6, enum_values=None
[2m2025-05-30T15:38:29.333852Z[0m [34mDEBUG[0m Converting schema 'StackType' of type: Enum(EnumType { default_index: Some(4), values: [String("backend"), String("frontend"), String("infrastructure"), String("systems"), String("unknown")], variants: Some({"Backend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("backend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Frontend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("frontend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Infrastructure": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("infrastructure") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Systems": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("systems") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Unknown": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("unknown") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) })
[2m2025-05-30T15:38:29.333889Z[0m [34mDEBUG[0m Created enum typealias 'StackType' with values: "backend" | "frontend" | "infrastructure" | "systems" | "unknown"
[2m2025-05-30T15:38:29.333901Z[0m [34mDEBUG[0m Final PklType for 'StackType': kind=TypeAlias, properties=0, enum_values=Some("\"backend\" | \"frontend\" | \"infrastructure\" | \"systems\" | \"unknown\"")
[2m2025-05-30T15:38:29.333914Z[0m [34mDEBUG[0m Converting schema 'TaskArgs' of type: Union(UnionType { default_index: Some(0), partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] })
[2m2025-05-30T15:38:29.333934Z[0m [34mDEBUG[0m Created union typealias 'TaskArgs' with types: Null | String | Listing<String>
[2m2025-05-30T15:38:29.333942Z[0m [34mDEBUG[0m Union type for TaskArgs: Null | String | Listing<String>
[2m2025-05-30T15:38:29.333950Z[0m [34mDEBUG[0m Final PklType for 'TaskArgs': kind=TypeAlias, properties=0, enum_values=Some("Null | String | Listing<String>")
[2m2025-05-30T15:38:29.333959Z[0m [34mDEBUG[0m Converting schema 'TaskDependencyConfig' of type: Struct(StructType { fields: {"args": SchemaField { comment: Some("Additional arguments to pass to this dependency when it's ran."), schema: Schema { deprecated: None, description: Some("Configures a command to execute, and its arguments."), name: Some("TaskArgs"), nullable: false, ty: Union(UnionType { default_index: Some(0), partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "env": SchemaField { comment: Some("A mapping of environment variables specific to this dependency."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "optional": SchemaField { comment: Some("Marks the dependency is optional when being inherited from the top-level."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "target": SchemaField { comment: Some("The target of the depended on task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}, partial: true, required: None })
[2m2025-05-30T15:38:29.334042Z[0m [34mDEBUG[0m Created struct class 'TaskDependencyConfig' with 4 properties
[2m2025-05-30T15:38:29.334073Z[0m [34mDEBUG[0m Final PklType for 'TaskDependencyConfig': kind=Class, properties=4, enum_values=None
[2m2025-05-30T15:38:29.334091Z[0m [34mDEBUG[0m Converting schema 'TaskDependency' of type: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: Some("Expanded information about a task dependency."), name: Some("TaskDependencyConfig"), nullable: false, ty: Struct(StructType { fields: {"args": SchemaField { comment: Some("Additional arguments to pass to this dependency when it's ran."), schema: Schema { deprecated: None, description: Some("Configures a command to execute, and its arguments."), name: Some("TaskArgs"), nullable: false, ty: Union(UnionType { default_index: Some(0), partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "env": SchemaField { comment: Some("A mapping of environment variables specific to this dependency."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "optional": SchemaField { comment: Some("Marks the dependency is optional when being inherited from the top-level."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "target": SchemaField { comment: Some("The target of the depended on task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }] })
[2m2025-05-30T15:38:29.334147Z[0m [34mDEBUG[0m Created union typealias 'TaskDependency' with types: String | TaskDependencyConfig
[2m2025-05-30T15:38:29.334157Z[0m [34mDEBUG[0m Union type for TaskDependency: String | TaskDependencyConfig
[2m2025-05-30T15:38:29.334165Z[0m [34mDEBUG[0m Final PklType for 'TaskDependency': kind=TypeAlias, properties=0, enum_values=Some("String | TaskDependencyConfig")
[2m2025-05-30T15:38:29.334177Z[0m [34mDEBUG[0m Converting schema 'TaskOptionEnvFile' of type: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] })
[2m2025-05-30T15:38:29.334193Z[0m [34mDEBUG[0m Created union typealias 'TaskOptionEnvFile' with types: Boolean | String | Listing<String>
[2m2025-05-30T15:38:29.334200Z[0m [34mDEBUG[0m Union type for TaskOptionEnvFile: Boolean | String | Listing<String>
[2m2025-05-30T15:38:29.334207Z[0m [34mDEBUG[0m Final PklType for 'TaskOptionEnvFile': kind=TypeAlias, properties=0, enum_values=Some("Boolean | String | Listing<String>")
[2m2025-05-30T15:38:29.334220Z[0m [34mDEBUG[0m Converting schema 'TaskMergeStrategy' of type: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) })
[2m2025-05-30T15:38:29.334244Z[0m [34mDEBUG[0m Created enum typealias 'TaskMergeStrategy' with values: "append" | "prepend" | "preserve" | "replace"
[2m2025-05-30T15:38:29.334252Z[0m [34mDEBUG[0m Final PklType for 'TaskMergeStrategy': kind=TypeAlias, properties=0, enum_values=Some("\"append\" | \"prepend\" | \"preserve\" | \"replace\"")
[2m2025-05-30T15:38:29.334262Z[0m [34mDEBUG[0m Converting schema 'TaskOperatingSystem' of type: Enum(EnumType { default_index: None, values: [String("linux"), String("macos"), String("windows")], variants: Some({"Linux": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("linux") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Macos": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("macos") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Windows": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("windows") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) })
[2m2025-05-30T15:38:29.334277Z[0m [34mDEBUG[0m Created enum typealias 'TaskOperatingSystem' with values: "linux" | "macos" | "windows"
[2m2025-05-30T15:38:29.334284Z[0m [34mDEBUG[0m Final PklType for 'TaskOperatingSystem': kind=TypeAlias, properties=0, enum_values=Some("\"linux\" | \"macos\" | \"windows\"")
[2m2025-05-30T15:38:29.334293Z[0m [34mDEBUG[0m Converting schema 'TaskOutputStyle' of type: Enum(EnumType { default_index: Some(0), values: [String("buffer"), String("buffer-only-failure"), String("hash"), String("none"), String("stream")], variants: Some({"Buffer": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("buffer") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "BufferOnlyFailure": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("buffer-only-failure") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Hash": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("hash") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "None": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("none") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Stream": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("stream") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) })
[2m2025-05-30T15:38:29.334321Z[0m [34mDEBUG[0m Created enum typealias 'TaskOutputStyle' with values: "buffer" | "buffer-only-failure" | "hash" | "none" | "stream"
[2m2025-05-30T15:38:29.334328Z[0m [34mDEBUG[0m Final PklType for 'TaskOutputStyle': kind=TypeAlias, properties=0, enum_values=Some("\"buffer\" | \"buffer-only-failure\" | \"hash\" | \"none\" | \"stream\"")
[2m2025-05-30T15:38:29.334338Z[0m [34mDEBUG[0m Converting schema 'TaskPriority' of type: Enum(EnumType { default_index: Some(2), values: [String("critical"), String("high"), String("normal"), String("low")], variants: Some({"Critical": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("critical") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "High": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("high") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Normal": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("normal") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Low": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("low") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) })
[2m2025-05-30T15:38:29.334355Z[0m [34mDEBUG[0m Created enum typealias 'TaskPriority' with values: "critical" | "high" | "normal" | "low"
[2m2025-05-30T15:38:29.334362Z[0m [34mDEBUG[0m Final PklType for 'TaskPriority': kind=TypeAlias, properties=0, enum_values=Some("\"critical\" | \"high\" | \"normal\" | \"low\"")
[2m2025-05-30T15:38:29.334371Z[0m [34mDEBUG[0m Converting schema 'TaskUnixShell' of type: Enum(EnumType { default_index: Some(0), values: [String("bash"), String("elvish"), String("fish"), String("ion"), String("murex"), String("nu"), String("pwsh"), String("xonsh"), String("zsh")], variants: Some({"Bash": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("bash") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Elvish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("elvish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Fish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("fish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Ion": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("ion") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Murex": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("murex") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Nu": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("nu") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Pwsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("pwsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Xonsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("xonsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Zsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("zsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) })
[2m2025-05-30T15:38:29.334422Z[0m [34mDEBUG[0m Created enum typealias 'TaskUnixShell' with values: "bash" | "elvish" | "fish" | "ion" | "murex" | "nu" | "pwsh" | "xonsh" | "zsh"
[2m2025-05-30T15:38:29.334432Z[0m [34mDEBUG[0m Final PklType for 'TaskUnixShell': kind=TypeAlias, properties=0, enum_values=Some("\"bash\" | \"elvish\" | \"fish\" | \"ion\" | \"murex\" | \"nu\" | \"pwsh\" | \"xonsh\" | \"zsh\"")
[2m2025-05-30T15:38:29.334444Z[0m [34mDEBUG[0m Converting schema 'TaskWindowsShell' of type: Enum(EnumType { default_index: Some(5), values: [String("bash"), String("elvish"), String("fish"), String("murex"), String("nu"), String("pwsh"), String("xonsh")], variants: Some({"Bash": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("bash") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Elvish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("elvish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Fish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("fish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Murex": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("murex") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Nu": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("nu") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Pwsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("pwsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Xonsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("xonsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) })
[2m2025-05-30T15:38:29.334488Z[0m [34mDEBUG[0m Created enum typealias 'TaskWindowsShell' with values: "bash" | "elvish" | "fish" | "murex" | "nu" | "pwsh" | "xonsh"
[2m2025-05-30T15:38:29.334498Z[0m [34mDEBUG[0m Final PklType for 'TaskWindowsShell': kind=TypeAlias, properties=0, enum_values=Some("\"bash\" | \"elvish\" | \"fish\" | \"murex\" | \"nu\" | \"pwsh\" | \"xonsh\"")
[2m2025-05-30T15:38:29.334510Z[0m [34mDEBUG[0m Converting schema 'TaskOptionsConfig' of type: Struct(StructType { fields: {"affectedFiles": SchemaField { comment: Some("The pattern in which affected files will be passed to the task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: Some(["args", "env"]), format: None, max_length: None, min_length: None, pattern: None }) }] }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "affectedPassInputs": SchemaField { comment: Some("When affected and no files are matching, pass the task inputs\nas arguments to the command, instead of `.`."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "allowFailure": SchemaField { comment: Some("Allows the task to fail without failing the entire pipeline."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "cache": SchemaField { comment: Some("Caches the `outputs` of the task. Defaults to `true` if outputs\nare configured for the task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "cacheKey": SchemaField { comment: Some("A custom key to include in the cache hashing process. Can be\nused to invalidate local and remote caches."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "cacheLifetime": SchemaField { comment: Some("Lifetime to cache the task itself, in the format of \"1h\", \"30m\", etc.\nIf not defined, caches live forever, or until inputs change."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "envFile": SchemaField { comment: Some("Loads and sets environment variables from the `.env` file when\nrunning the task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: Some("TaskOptionEnvFile"), nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "inferInputs": SchemaField { comment: Some("Automatically infer inputs from file groups or environment variables\nthat were utilized within `command`, `script`, `args`, and `env`."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "interactive": SchemaField { comment: Some("Marks the task as interactive, so that it will run in isolation,\nand have direct access to stdin."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "internal": SchemaField { comment: Some("Marks the task as internal, which disables it from begin ran\nfrom the command line, but can be depended on."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "merge": SchemaField { comment: Some("The default strategy to use when merging `args`, `deps`, `env`,\n`inputs`, or `outputs` with an inherited task. Can be overridden\nwith the other field-specific merge options."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mergeArgs": SchemaField { comment: Some("The strategy to use when merging `args` with an inherited task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mergeDeps": SchemaField { comment: Some("The strategy to use when merging `deps` with an inherited task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mergeEnv": SchemaField { comment: Some("The strategy to use when merging `env` with an inherited task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mergeInputs": SchemaField { comment: Some("The strategy to use when merging `inputs` with an inherited task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mergeOutputs": SchemaField { comment: Some("The strategy to use when merging `outputs` with an inherited task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mutex": SchemaField { comment: Some("Creates an exclusive lock on a virtual resource, preventing other\ntasks using the same resource from running concurrently."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "os": SchemaField { comment: Some("The operating system in which to only run this task on."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The operating system in which to only run this task on."), name: Some("TaskOperatingSystem"), nullable: false, ty: Enum(EnumType { default_index: None, values: [String("linux"), String("macos"), String("windows")], variants: Some({"Linux": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("linux") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Macos": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("macos") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Windows": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("windows") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: Some("The operating system in which to only run this task on."), name: Some("TaskOperatingSystem"), nullable: false, ty: Enum(EnumType { default_index: None, values: [String("linux"), String("macos"), String("windows")], variants: Some({"Linux": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("linux") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Macos": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("macos") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Windows": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("windows") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "outputStyle": SchemaField { comment: Some("The style in which task output will be printed to the console."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The style in which task output will be printed to the console."), name: Some("TaskOutputStyle"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("buffer"), String("buffer-only-failure"), String("hash"), String("none"), String("stream")], variants: Some({"Buffer": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("buffer") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "BufferOnlyFailure": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("buffer-only-failure") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Hash": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("hash") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "None": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("none") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Stream": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("stream") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: Some("MOON_OUTPUT_STYLE"), hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "persistent": SchemaField { comment: Some("Marks the task as persistent (continuously running). This is ideal\nfor watchers, servers, or never-ending processes."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "priority": SchemaField { comment: Some("Marks the task with a certain priority, which determines the order\nin which it is ran within the pipeline."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The priority levels a task can be bucketed into."), name: Some("TaskPriority"), nullable: false, ty: Enum(EnumType { default_index: Some(2), values: [String("critical"), String("high"), String("normal"), String("low")], variants: Some({"Critical": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("critical") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "High": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("high") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Normal": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("normal") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Low": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("low") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "retryCount": SchemaField { comment: Some("The number of times a failing task will be retried to succeed."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Integer(IntegerType { default: None, enum_values: None, format: None, kind: U8, max: None, max_exclusive: None, min: None, min_exclusive: None, multiple_of: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: Some("MOON_RETRY_COUNT"), hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "runDepsInParallel": SchemaField { comment: Some("Runs direct task dependencies (via `deps`) in sequential order.\nThis _does not_ apply to indirect or transient dependencies."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "runFromWorkspaceRoot": SchemaField { comment: Some("Runs the task from the workspace root, instead of the project root."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "runInCI": SchemaField { comment: Some("Whether to run the task in CI or not, when executing `moon ci` or `moon run`."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: Some(["always", "affected"]), format: None, max_length: None, min_length: None, pattern: None }) }] }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "shell": SchemaField { comment: Some("Runs the task within a shell. When not defined, runs the task\ndirectly while relying on `PATH` resolution."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "timeout": SchemaField { comment: Some("The maximum time in seconds that a task can run before being cancelled."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Integer(IntegerType { default: None, enum_values: None, format: None, kind: U64, max: None, max_exclusive: None, min: None, min_exclusive: None, multiple_of: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "unixShell": SchemaField { comment: Some("The shell to run the task in when on a Unix-based machine."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("A list of available shells on Unix."), name: Some("TaskUnixShell"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("bash"), String("elvish"), String("fish"), String("ion"), String("murex"), String("nu"), String("pwsh"), String("xonsh"), String("zsh")], variants: Some({"Bash": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("bash") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Elvish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("elvish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Fish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("fish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Ion": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("ion") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Murex": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("murex") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Nu": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("nu") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Pwsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("pwsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Xonsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("xonsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Zsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("zsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "windowsShell": SchemaField { comment: Some("The shell to run the task in when on a Windows machine."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("A list of available shells on Windows."), name: Some("TaskWindowsShell"), nullable: false, ty: Enum(EnumType { default_index: Some(5), values: [String("bash"), String("elvish"), String("fish"), String("murex"), String("nu"), String("pwsh"), String("xonsh")], variants: Some({"Bash": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("bash") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Elvish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("elvish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Fish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("fish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Murex": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("murex") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Nu": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("nu") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Pwsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("pwsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Xonsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("xonsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None })
[2m2025-05-30T15:38:29.335202Z[0m [34mDEBUG[0m Created struct class 'TaskOptionsConfig' with 29 properties
[2m2025-05-30T15:38:29.335320Z[0m [34mDEBUG[0m Final PklType for 'TaskOptionsConfig': kind=Class, properties=29, enum_values=None
[2m2025-05-30T15:38:29.335401Z[0m [34mDEBUG[0m Converting schema 'TaskPreset' of type: Enum(EnumType { default_index: None, values: [String("server"), String("watcher")], variants: Some({"Server": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("server") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Watcher": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("watcher") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) })
[2m2025-05-30T15:38:29.335493Z[0m [34mDEBUG[0m Created enum typealias 'TaskPreset' with values: "server" | "watcher"
[2m2025-05-30T15:38:29.335557Z[0m [34mDEBUG[0m Final PklType for 'TaskPreset': kind=TypeAlias, properties=0, enum_values=Some("\"server\" | \"watcher\"")
[2m2025-05-30T15:38:29.335651Z[0m [34mDEBUG[0m Converting schema 'TaskType' of type: Enum(EnumType { default_index: Some(2), values: [String("build"), String("run"), String("test")], variants: Some({"Build": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("build") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Run": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("run") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Test": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("test") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) })
[2m2025-05-30T15:38:29.335720Z[0m [34mDEBUG[0m Created enum typealias 'TaskType' with values: "build" | "run" | "test"
[2m2025-05-30T15:38:29.335740Z[0m [34mDEBUG[0m Final PklType for 'TaskType': kind=TypeAlias, properties=0, enum_values=Some("\"build\" | \"run\" | \"test\"")
[2m2025-05-30T15:38:29.335762Z[0m [34mDEBUG[0m Converting schema 'TaskConfig' of type: Struct(StructType { fields: {"args": SchemaField { comment: Some("Arguments to pass to the command when it's ran. Can be\ndefined as a string, or a list of individual arguments."), schema: Schema { deprecated: None, description: Some("Configures a command to execute, and its arguments."), name: Some("TaskArgs"), nullable: false, ty: Union(UnionType { default_index: Some(0), partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "command": SchemaField { comment: Some("The command or command line to execute when the task is ran.\nSupports the command name, with or without arguments. Can be\ndefined as a string, or a list of individual arguments."), schema: Schema { deprecated: None, description: Some("Configures a command to execute, and its arguments."), name: Some("TaskArgs"), nullable: false, ty: Union(UnionType { default_index: Some(0), partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "deps": SchemaField { comment: Some("Other tasks that this task depends on, and must run to completion\nbefore this task is ran. Can depend on sibling tasks, or tasks in\nother projects, using targets."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: Some("Configures another task that a task depends on."), name: Some("TaskDependency"), nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: Some("Expanded information about a task dependency."), name: Some("TaskDependencyConfig"), nullable: false, ty: Struct(StructType { fields: {"args": SchemaField { comment: Some("Additional arguments to pass to this dependency when it's ran."), schema: Schema { deprecated: None, description: Some("Configures a command to execute, and its arguments."), name: Some("TaskArgs"), nullable: false, ty: Union(UnionType { default_index: Some(0), partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "env": SchemaField { comment: Some("A mapping of environment variables specific to this dependency."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "optional": SchemaField { comment: Some("Marks the dependency is optional when being inherited from the top-level."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "target": SchemaField { comment: Some("The target of the depended on task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }] }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "description": SchemaField { comment: Some("A human-readable description about the task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "env": SchemaField { comment: Some("A mapping of environment variables that will be set when the\ntask is ran."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) } }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "extends": SchemaField { comment: Some("Extends settings from a sibling task by ID."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "globalInputs": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, deprecated: None, env_var: None, hidden: true, nullable: false, optional: false, read_only: false, write_only: false }, "inputs": SchemaField { comment: Some("Inputs and sources that will mark the task as affected when comparing\nagainst touched files. When not provided, all files within the project\nare considered an input. When an empty list, no files are considered.\nOtherwise, an explicit list of inputs are considered."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "local": SchemaField { comment: Some("Marks the task as local only. Local tasks do not run in CI, do not have\n`options.cache` enabled, and are marked as `options.persistent`."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: Some("Use `preset` instead."), env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "options": SchemaField { comment: Some("Options to control task inheritance and execution."), schema: Schema { deprecated: None, description: Some("Options to control task inheritance and execution."), name: Some("TaskOptionsConfig"), nullable: false, ty: Struct(StructType { fields: {"affectedFiles": SchemaField { comment: Some("The pattern in which affected files will be passed to the task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: Some(["args", "env"]), format: None, max_length: None, min_length: None, pattern: None }) }] }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "affectedPassInputs": SchemaField { comment: Some("When affected and no files are matching, pass the task inputs\nas arguments to the command, instead of `.`."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "allowFailure": SchemaField { comment: Some("Allows the task to fail without failing the entire pipeline."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "cache": SchemaField { comment: Some("Caches the `outputs` of the task. Defaults to `true` if outputs\nare configured for the task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "cacheKey": SchemaField { comment: Some("A custom key to include in the cache hashing process. Can be\nused to invalidate local and remote caches."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "cacheLifetime": SchemaField { comment: Some("Lifetime to cache the task itself, in the format of \"1h\", \"30m\", etc.\nIf not defined, caches live forever, or until inputs change."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "envFile": SchemaField { comment: Some("Loads and sets environment variables from the `.env` file when\nrunning the task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: Some("TaskOptionEnvFile"), nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "inferInputs": SchemaField { comment: Some("Automatically infer inputs from file groups or environment variables\nthat were utilized within `command`, `script`, `args`, and `env`."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "interactive": SchemaField { comment: Some("Marks the task as interactive, so that it will run in isolation,\nand have direct access to stdin."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "internal": SchemaField { comment: Some("Marks the task as internal, which disables it from begin ran\nfrom the command line, but can be depended on."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "merge": SchemaField { comment: Some("The default strategy to use when merging `args`, `deps`, `env`,\n`inputs`, or `outputs` with an inherited task. Can be overridden\nwith the other field-specific merge options."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mergeArgs": SchemaField { comment: Some("The strategy to use when merging `args` with an inherited task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mergeDeps": SchemaField { comment: Some("The strategy to use when merging `deps` with an inherited task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mergeEnv": SchemaField { comment: Some("The strategy to use when merging `env` with an inherited task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mergeInputs": SchemaField { comment: Some("The strategy to use when merging `inputs` with an inherited task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mergeOutputs": SchemaField { comment: Some("The strategy to use when merging `outputs` with an inherited task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mutex": SchemaField { comment: Some("Creates an exclusive lock on a virtual resource, preventing other\ntasks using the same resource from running concurrently."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "os": SchemaField { comment: Some("The operating system in which to only run this task on."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The operating system in which to only run this task on."), name: Some("TaskOperatingSystem"), nullable: false, ty: Enum(EnumType { default_index: None, values: [String("linux"), String("macos"), String("windows")], variants: Some({"Linux": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("linux") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Macos": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("macos") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Windows": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("windows") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: Some("The operating system in which to only run this task on."), name: Some("TaskOperatingSystem"), nullable: false, ty: Enum(EnumType { default_index: None, values: [String("linux"), String("macos"), String("windows")], variants: Some({"Linux": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("linux") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Macos": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("macos") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Windows": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("windows") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "outputStyle": SchemaField { comment: Some("The style in which task output will be printed to the console."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The style in which task output will be printed to the console."), name: Some("TaskOutputStyle"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("buffer"), String("buffer-only-failure"), String("hash"), String("none"), String("stream")], variants: Some({"Buffer": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("buffer") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "BufferOnlyFailure": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("buffer-only-failure") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Hash": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("hash") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "None": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("none") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Stream": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("stream") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: Some("MOON_OUTPUT_STYLE"), hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "persistent": SchemaField { comment: Some("Marks the task as persistent (continuously running). This is ideal\nfor watchers, servers, or never-ending processes."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "priority": SchemaField { comment: Some("Marks the task with a certain priority, which determines the order\nin which it is ran within the pipeline."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The priority levels a task can be bucketed into."), name: Some("TaskPriority"), nullable: false, ty: Enum(EnumType { default_index: Some(2), values: [String("critical"), String("high"), String("normal"), String("low")], variants: Some({"Critical": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("critical") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "High": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("high") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Normal": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("normal") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Low": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("low") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "retryCount": SchemaField { comment: Some("The number of times a failing task will be retried to succeed."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Integer(IntegerType { default: None, enum_values: None, format: None, kind: U8, max: None, max_exclusive: None, min: None, min_exclusive: None, multiple_of: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: Some("MOON_RETRY_COUNT"), hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "runDepsInParallel": SchemaField { comment: Some("Runs direct task dependencies (via `deps`) in sequential order.\nThis _does not_ apply to indirect or transient dependencies."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "runFromWorkspaceRoot": SchemaField { comment: Some("Runs the task from the workspace root, instead of the project root."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "runInCI": SchemaField { comment: Some("Whether to run the task in CI or not, when executing `moon ci` or `moon run`."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: Some(["always", "affected"]), format: None, max_length: None, min_length: None, pattern: None }) }] }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "shell": SchemaField { comment: Some("Runs the task within a shell. When not defined, runs the task\ndirectly while relying on `PATH` resolution."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "timeout": SchemaField { comment: Some("The maximum time in seconds that a task can run before being cancelled."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Integer(IntegerType { default: None, enum_values: None, format: None, kind: U64, max: None, max_exclusive: None, min: None, min_exclusive: None, multiple_of: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "unixShell": SchemaField { comment: Some("The shell to run the task in when on a Unix-based machine."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("A list of available shells on Unix."), name: Some("TaskUnixShell"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("bash"), String("elvish"), String("fish"), String("ion"), String("murex"), String("nu"), String("pwsh"), String("xonsh"), String("zsh")], variants: Some({"Bash": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("bash") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Elvish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("elvish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Fish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("fish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Ion": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("ion") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Murex": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("murex") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Nu": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("nu") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Pwsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("pwsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Xonsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("xonsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Zsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("zsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "windowsShell": SchemaField { comment: Some("The shell to run the task in when on a Windows machine."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("A list of available shells on Windows."), name: Some("TaskWindowsShell"), nullable: false, ty: Enum(EnumType { default_index: Some(5), values: [String("bash"), String("elvish"), String("fish"), String("murex"), String("nu"), String("pwsh"), String("xonsh")], variants: Some({"Bash": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("bash") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Elvish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("elvish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Fish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("fish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Murex": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("murex") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Nu": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("nu") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Pwsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("pwsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Xonsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("xonsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "outputs": SchemaField { comment: Some("Outputs that will be created when the task has successfully ran.\nWhen `cache` is enabled, the outputs will be persisted for subsequent runs."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "platform": SchemaField { comment: Some("The platform in which the task will be ran in. The platform determines\navailable binaries, lookup paths, and more. When not provided, will\nbe automatically detected."), schema: Schema { deprecated: None, description: Some("Platforms that each programming language can belong to."), name: Some("PlatformType"), nullable: false, ty: Enum(EnumType { default_index: Some(6), values: [String("bun"), String("deno"), String("node"), String("python"), String("rust"), String("system"), String("unknown")], variants: Some({"Bun": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("bun") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Deno": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("deno") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Node": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("node") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Python": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("python") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Rust": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("rust") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "System": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("system") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Unknown": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("unknown") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "preset": SchemaField { comment: Some("The preset to apply for the task. Will inherit default options."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Preset options to inherit."), name: Some("TaskPreset"), nullable: false, ty: Enum(EnumType { default_index: None, values: [String("server"), String("watcher")], variants: Some({"Server": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("server") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Watcher": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("watcher") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "script": SchemaField { comment: Some("A script to run within a shell. A script is anything from a single command,\nto multiple commands (&&, etc), or shell specific syntax. Does not support\narguments, merging, or inheritance."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "toolchain": SchemaField { comment: Some("The toolchain(s) in which the task will be ran in. The toolchain determines\navailable binaries, lookup paths, and more. When not provided, will\nbe automatically detected."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "type": SchemaField { comment: Some("The type of task, primarily used for categorical reasons. When not provided,\nwill be automatically determined."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The type of task."), name: Some("TaskType"), nullable: false, ty: Enum(EnumType { default_index: Some(2), values: [String("build"), String("run"), String("test")], variants: Some({"Build": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("build") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Run": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("run") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Test": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("test") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None })
[2m2025-05-30T15:38:29.336592Z[0m [34mDEBUG[0m Created struct class 'TaskConfig' with 16 properties
[2m2025-05-30T15:38:29.336665Z[0m [34mDEBUG[0m Final PklType for 'TaskConfig': kind=Class, properties=16, enum_values=None
[2m2025-05-30T15:38:29.336733Z[0m [34mDEBUG[0m Converting schema 'UnresolvedVersionSpec' of type: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None })
[2m2025-05-30T15:38:29.336786Z[0m [34mDEBUG[0m Unhandled schema type for UnresolvedVersionSpec: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None })
[2m2025-05-30T15:38:29.336799Z[0m [34mDEBUG[0m Created fallback class 'UnresolvedVersionSpec' for unhandled type
[2m2025-05-30T15:38:29.336808Z[0m [34mDEBUG[0m Final PklType for 'UnresolvedVersionSpec': kind=Class, properties=0, enum_values=None
[2m2025-05-30T15:38:29.336818Z[0m [34mDEBUG[0m Converting schema 'ProjectToolchainCommonToolConfig' of type: Struct(StructType { fields: {"version": SchemaField { comment: Some("Version of the tool this project will use."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Represents an unresolved version or alias that must be resolved to a fully-qualified version."), name: Some("UnresolvedVersionSpec"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None })
[2m2025-05-30T15:38:29.336847Z[0m [34mDEBUG[0m Created struct class 'ProjectToolchainCommonToolConfig' with 1 properties
[2m2025-05-30T15:38:29.336855Z[0m [34mDEBUG[0m Final PklType for 'ProjectToolchainCommonToolConfig': kind=Class, properties=1, enum_values=None
[2m2025-05-30T15:38:29.336867Z[0m [34mDEBUG[0m Converting schema 'PluginLocator' of type: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None })
[2m2025-05-30T15:38:29.336877Z[0m [34mDEBUG[0m Unhandled schema type for PluginLocator: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None })
[2m2025-05-30T15:38:29.336885Z[0m [34mDEBUG[0m Created fallback class 'PluginLocator' for unhandled type
[2m2025-05-30T15:38:29.336891Z[0m [34mDEBUG[0m Final PklType for 'PluginLocator': kind=Class, properties=0, enum_values=None
[2m2025-05-30T15:38:29.336901Z[0m [34mDEBUG[0m Converting schema 'ToolchainPluginConfig' of type: Struct(StructType { fields: {"config": SchemaField { comment: Some("Arbitrary configuration that'll be passed to the WASM plugin."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Unknown } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "disabled": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "plugin": SchemaField { comment: Some("Location of the WASM plugin to use."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Strategies and protocols for locating plugins."), name: Some("PluginLocator"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "version": SchemaField { comment: Some("The version of the toolchain to download and install."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Represents an unresolved version or alias that must be resolved to a fully-qualified version."), name: Some("UnresolvedVersionSpec"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None })
[2m2025-05-30T15:38:29.336953Z[0m [34mDEBUG[0m Created struct class 'ToolchainPluginConfig' with 4 properties
[2m2025-05-30T15:38:29.336962Z[0m [34mDEBUG[0m Final PklType for 'ToolchainPluginConfig': kind=Class, properties=4, enum_values=None
[2m2025-05-30T15:38:29.336974Z[0m [34mDEBUG[0m Converting schema 'ProjectToolchainEntry' of type: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: Some("Configures an individual toolchain."), name: Some("ToolchainPluginConfig"), nullable: false, ty: Struct(StructType { fields: {"config": SchemaField { comment: Some("Arbitrary configuration that'll be passed to the WASM plugin."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Unknown } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "disabled": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "plugin": SchemaField { comment: Some("Location of the WASM plugin to use."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Strategies and protocols for locating plugins."), name: Some("PluginLocator"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "version": SchemaField { comment: Some("The version of the toolchain to download and install."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Represents an unresolved version or alias that must be resolved to a fully-qualified version."), name: Some("UnresolvedVersionSpec"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }] })
[2m2025-05-30T15:38:29.337013Z[0m [34mDEBUG[0m Created union typealias 'ProjectToolchainEntry' with types: Null | Boolean | ToolchainPluginConfig
[2m2025-05-30T15:38:29.337022Z[0m [34mDEBUG[0m Union type for ProjectToolchainEntry: Null | Boolean | ToolchainPluginConfig
[2m2025-05-30T15:38:29.337030Z[0m [34mDEBUG[0m Final PklType for 'ProjectToolchainEntry': kind=TypeAlias, properties=0, enum_values=Some("Null | Boolean | ToolchainPluginConfig")
[2m2025-05-30T15:38:29.337042Z[0m [34mDEBUG[0m Converting schema 'ProjectToolchainConfig' of type: Struct(StructType { fields: {"bun": SchemaField { comment: Some("Overrides `bun` settings."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Overrides top-level toolchain settings."), name: Some("ProjectToolchainCommonToolConfig"), nullable: false, ty: Struct(StructType { fields: {"version": SchemaField { comment: Some("Version of the tool this project will use."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Represents an unresolved version or alias that must be resolved to a fully-qualified version."), name: Some("UnresolvedVersionSpec"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "default": SchemaField { comment: Some("The default toolchain(s) for all tasks within the project,\nif their toolchain is unknown."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "deno": SchemaField { comment: Some("Overrides `deno` settings."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Overrides top-level toolchain settings."), name: Some("ProjectToolchainCommonToolConfig"), nullable: false, ty: Struct(StructType { fields: {"version": SchemaField { comment: Some("Version of the tool this project will use."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Represents an unresolved version or alias that must be resolved to a fully-qualified version."), name: Some("UnresolvedVersionSpec"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "node": SchemaField { comment: Some("Overrides `node` settings."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Overrides top-level toolchain settings."), name: Some("ProjectToolchainCommonToolConfig"), nullable: false, ty: Struct(StructType { fields: {"version": SchemaField { comment: Some("Version of the tool this project will use."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Represents an unresolved version or alias that must be resolved to a fully-qualified version."), name: Some("UnresolvedVersionSpec"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "plugins": SchemaField { comment: Some("Overrides toolchains by their ID."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: Some("ProjectToolchainEntry"), nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: Some("Configures an individual toolchain."), name: Some("ToolchainPluginConfig"), nullable: false, ty: Struct(StructType { fields: {"config": SchemaField { comment: Some("Arbitrary configuration that'll be passed to the WASM plugin."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Unknown } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "disabled": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "plugin": SchemaField { comment: Some("Location of the WASM plugin to use."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Strategies and protocols for locating plugins."), name: Some("PluginLocator"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "version": SchemaField { comment: Some("The version of the toolchain to download and install."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Represents an unresolved version or alias that must be resolved to a fully-qualified version."), name: Some("UnresolvedVersionSpec"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }] }) } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "python": SchemaField { comment: Some("Overrides `python` settings."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Overrides top-level toolchain settings."), name: Some("ProjectToolchainCommonToolConfig"), nullable: false, ty: Struct(StructType { fields: {"version": SchemaField { comment: Some("Version of the tool this project will use."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Represents an unresolved version or alias that must be resolved to a fully-qualified version."), name: Some("UnresolvedVersionSpec"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "rust": SchemaField { comment: Some("Overrides `rust` settings."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Overrides top-level toolchain settings."), name: Some("ProjectToolchainCommonToolConfig"), nullable: false, ty: Struct(StructType { fields: {"version": SchemaField { comment: Some("Version of the tool this project will use."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Represents an unresolved version or alias that must be resolved to a fully-qualified version."), name: Some("UnresolvedVersionSpec"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None })
[2m2025-05-30T15:38:29.337260Z[0m [34mDEBUG[0m Created struct class 'ProjectToolchainConfig' with 7 properties
[2m2025-05-30T15:38:29.337305Z[0m [34mDEBUG[0m Final PklType for 'ProjectToolchainConfig': kind=Class, properties=7, enum_values=None
[2m2025-05-30T15:38:29.337338Z[0m [34mDEBUG[0m Converting schema 'ProjectType' of type: Enum(EnumType { default_index: Some(6), values: [String("application"), String("automation"), String("configuration"), String("library"), String("scaffolding"), String("tool"), String("unknown")], variants: Some({"Application": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("application") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Automation": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("automation") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Configuration": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("configuration") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Library": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("library") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Scaffolding": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("scaffolding") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Tool": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("tool") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Unknown": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("unknown") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) })
[2m2025-05-30T15:38:29.337413Z[0m [34mDEBUG[0m Created enum typealias 'ProjectType' with values: "application" | "automation" | "configuration" | "library" | "scaffolding" | "tool" | "unknown"
[2m2025-05-30T15:38:29.337424Z[0m [34mDEBUG[0m Final PklType for 'ProjectType': kind=TypeAlias, properties=0, enum_values=Some("\"application\" | \"automation\" | \"configuration\" | \"library\" | \"scaffolding\" | \"tool\" | \"unknown\"")
[2m2025-05-30T15:38:29.337439Z[0m [34mDEBUG[0m Converting schema 'ProjectWorkspaceInheritedTasksConfig' of type: Struct(StructType { fields: {"exclude": SchemaField { comment: Some("Excludes inheriting tasks by ID."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "include": SchemaField { comment: Some("Only inherits tasks by ID, and ignores the rest.\nWhen not defined, inherits all matching tasks.\nWhen an empty list, inherits no tasks."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "rename": SchemaField { comment: Some("Renames inherited tasks to a new ID."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}, partial: true, required: None })
[2m2025-05-30T15:38:29.337481Z[0m [34mDEBUG[0m Created struct class 'ProjectWorkspaceInheritedTasksConfig' with 3 properties
[2m2025-05-30T15:38:29.337489Z[0m [34mDEBUG[0m Final PklType for 'ProjectWorkspaceInheritedTasksConfig': kind=Class, properties=3, enum_values=None
[2m2025-05-30T15:38:29.337502Z[0m [34mDEBUG[0m Converting schema 'ProjectWorkspaceConfig' of type: Struct(StructType { fields: {"inheritedTasks": SchemaField { comment: Some("Controls how tasks are inherited."), schema: Schema { deprecated: None, description: Some("Controls how tasks are inherited."), name: Some("ProjectWorkspaceInheritedTasksConfig"), nullable: false, ty: Struct(StructType { fields: {"exclude": SchemaField { comment: Some("Excludes inheriting tasks by ID."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "include": SchemaField { comment: Some("Only inherits tasks by ID, and ignores the rest.\nWhen not defined, inherits all matching tasks.\nWhen an empty list, inherits no tasks."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "rename": SchemaField { comment: Some("Renames inherited tasks to a new ID."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}, partial: true, required: None })
[2m2025-05-30T15:38:29.337535Z[0m [34mDEBUG[0m Created struct class 'ProjectWorkspaceConfig' with 1 properties
[2m2025-05-30T15:38:29.337543Z[0m [34mDEBUG[0m Final PklType for 'ProjectWorkspaceConfig': kind=Class, properties=1, enum_values=None
[2m2025-05-30T15:38:29.337554Z[0m [34mDEBUG[0m Converting schema 'ProjectConfig' of type: Struct(StructType { fields: {"$schema": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: Some(String("https://moonrepo.dev/schemas/project.json")), enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: true, read_only: false, write_only: false }, "dependsOn": SchemaField { comment: Some("Other projects that this project depends on."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: Some("Expanded information about a project dependency."), name: Some("ProjectDependsOn"), nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: Some("Expanded information about a project dependency."), name: Some("DependencyConfig"), nullable: false, ty: Struct(StructType { fields: {"id": SchemaField { comment: Some("ID of the depended on project."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "scope": SchemaField { comment: Some("Scope of the dependency relationship."), schema: Schema { deprecated: None, description: Some("The scope and or relationship of the dependency."), name: Some("DependencyScope"), nullable: false, ty: Enum(EnumType { default_index: Some(3), values: [String("build"), String("development"), String("peer"), String("production"), String("root")], variants: Some({"Build": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("build") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Development": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("development") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Peer": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("peer") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Production": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("production") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Root": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("root") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "source": SchemaField { comment: Some("Source of where the dependency came from."), schema: Schema { deprecated: None, description: Some("The source where the dependency comes from. Either explicitly\ndefined in configuration, or implicitly derived from source files."), name: Some("DependencySource"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("explicit"), String("implicit")], variants: Some({"Explicit": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("explicit") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Implicit": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("implicit") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "via": SchemaField { comment: Some("Metadata about the source."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }] }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "docker": SchemaField { comment: Some("Configures Docker integration for this project."), schema: Schema { deprecated: None, description: Some("Configures our Docker integration."), name: Some("ProjectDockerConfig"), nullable: false, ty: Struct(StructType { fields: {"file": SchemaField { comment: Some("Configures aspects of the `Dockerfile` generation process."), schema: Schema { deprecated: None, description: Some("Configures `Dockerfile` generation."), name: Some("ProjectDockerFileConfig"), nullable: false, ty: Struct(StructType { fields: {"buildTask": SchemaField { comment: Some("A task within the current project for building the project."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "image": SchemaField { comment: Some("The base Docker image."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "startTask": SchemaField { comment: Some("A task within the current project for starting the project."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "scaffold": SchemaField { comment: Some("Configures aspects of the Docker scaffolding process."), schema: Schema { deprecated: None, description: Some("Configures aspects of the Docker scaffolding process."), name: Some("ProjectDockerScaffoldConfig"), nullable: false, ty: Struct(StructType { fields: {"include": SchemaField { comment: Some("List of glob patterns, relative from the project root,\nto include (or exclude) in the sources skeleton."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "env": SchemaField { comment: Some("A mapping of environment variables that will be set for\nall tasks within the project."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "fileGroups": SchemaField { comment: Some("A mapping of group IDs to a list of file paths, globs, and\nenvironment variables, that can be referenced from tasks."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "id": SchemaField { comment: Some("Overrides the ID within the project graph, as defined in\nthe workspace `projects` setting."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "language": SchemaField { comment: Some("The primary programming language of the project."), schema: Schema { deprecated: None, description: Some("Supported programming languages that each project can be written in."), name: Some("LanguageType"), nullable: false, ty: Enum(EnumType { default_index: Some(9), values: [String("bash"), String("batch"), String("go"), String("javascript"), String("php"), String("python"), String("ruby"), String("rust"), String("typescript"), String("unknown")], variants: Some({"Bash": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("bash") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Batch": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("batch") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Go": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("go") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "JavaScript": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("javascript") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Php": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("php") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Python": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("python") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Ruby": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("ruby") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Rust": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("rust") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "TypeScript": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("typescript") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Unknown": SchemaField { comment: Some("Not explicitly set or detected."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("unknown") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Other": SchemaField { comment: Some("An unsupported language."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "owners": SchemaField { comment: Some("Defines ownership of source code within the current project, by mapping\nfile paths and globs to owners. An owner is either a user, team, or group."), schema: Schema { deprecated: None, description: Some("Defines ownership of source code within the current project, by mapping\nfile paths and globs to owners. An owner is either a user, team, or group."), name: Some("OwnersConfig"), nullable: false, ty: Struct(StructType { fields: {"customGroups": SchemaField { comment: Some("Bitbucket only. A mapping of custom groups (prefixed with `@@@`),\nto a list of user and normal groups."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "defaultOwner": SchemaField { comment: Some("The default owner for `paths`."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "optional": SchemaField { comment: Some("GitLab only. Marks the code owners section as optional."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "paths": SchemaField { comment: Some("A mapping of file paths and file globs to owners.\nWhen a list, the `defaultOwner` is the owner, and each item is a path.\nWhen an object, the key is a path, and the value is a list of owners."), schema: Schema { deprecated: None, description: Some("A mapping of file paths and file globs to owners."), name: Some("OwnersPaths"), nullable: false, ty: Union(UnionType { default_index: Some(0), partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) } }) }] }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "requiredApprovals": SchemaField { comment: Some("Bitbucket and GitLab only. The number of approvals required for the\nrequest to be satisfied. For Bitbucket, utilizes the `Check()` condition.\nFor GitLab, marks the code owners section as required."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Integer(IntegerType { default: None, enum_values: None, format: None, kind: U8, max: None, max_exclusive: None, min: None, min_exclusive: None, multiple_of: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "platform": SchemaField { comment: Some("The default platform for all tasks within the project,\nif their platform is unknown."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Platforms that each programming language can belong to."), name: Some("PlatformType"), nullable: false, ty: Enum(EnumType { default_index: Some(6), values: [String("bun"), String("deno"), String("node"), String("python"), String("rust"), String("system"), String("unknown")], variants: Some({"Bun": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("bun") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Deno": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("deno") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Node": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("node") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Python": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("python") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Rust": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("rust") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "System": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("system") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Unknown": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("unknown") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: Some(""), env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "project": SchemaField { comment: Some("Expanded information about the project."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Expanded information about the project."), name: Some("ProjectMetadataConfig"), nullable: false, ty: Struct(StructType { fields: {"channel": SchemaField { comment: Some("The Slack, Discord, etc, channel to discuss the project.\nMust start with a `#`."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "description": SchemaField { comment: Some("A description on what the project does, and why it exists."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "maintainers": SchemaField { comment: Some("The individual maintainers of the project. The format is unspecified."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "metadata": SchemaField { comment: Some("Custom metadata fields."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Unknown } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "name": SchemaField { comment: Some("A human-readable name of the project."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "owner": SchemaField { comment: Some("The owner of the project. Can be an individual, team, or\norganization. The format is unspecified."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "stack": SchemaField { comment: Some("The technology stack of the project, for categorizing."), schema: Schema { deprecated: None, description: Some("The technology stack of the project, for categorizing."), name: Some("StackType"), nullable: false, ty: Enum(EnumType { default_index: Some(4), values: [String("backend"), String("frontend"), String("infrastructure"), String("systems"), String("unknown")], variants: Some({"Backend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("backend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Frontend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("frontend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Infrastructure": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("infrastructure") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Systems": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("systems") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Unknown": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("unknown") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "tags": SchemaField { comment: Some("A list of tags that this project belongs to, for categorizing,\nboundary enforcement, and task inheritance."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "tasks": SchemaField { comment: Some("A mapping of tasks by ID to parameters required for running the task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: Some("Configures a task to be ran within the action pipeline."), name: Some("TaskConfig"), nullable: false, ty: Struct(StructType { fields: {"args": SchemaField { comment: Some("Arguments to pass to the command when it's ran. Can be\ndefined as a string, or a list of individual arguments."), schema: Schema { deprecated: None, description: Some("Configures a command to execute, and its arguments."), name: Some("TaskArgs"), nullable: false, ty: Union(UnionType { default_index: Some(0), partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "command": SchemaField { comment: Some("The command or command line to execute when the task is ran.\nSupports the command name, with or without arguments. Can be\ndefined as a string, or a list of individual arguments."), schema: Schema { deprecated: None, description: Some("Configures a command to execute, and its arguments."), name: Some("TaskArgs"), nullable: false, ty: Union(UnionType { default_index: Some(0), partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "deps": SchemaField { comment: Some("Other tasks that this task depends on, and must run to completion\nbefore this task is ran. Can depend on sibling tasks, or tasks in\nother projects, using targets."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: Some("Configures another task that a task depends on."), name: Some("TaskDependency"), nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: Some("Expanded information about a task dependency."), name: Some("TaskDependencyConfig"), nullable: false, ty: Struct(StructType { fields: {"args": SchemaField { comment: Some("Additional arguments to pass to this dependency when it's ran."), schema: Schema { deprecated: None, description: Some("Configures a command to execute, and its arguments."), name: Some("TaskArgs"), nullable: false, ty: Union(UnionType { default_index: Some(0), partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "env": SchemaField { comment: Some("A mapping of environment variables specific to this dependency."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "optional": SchemaField { comment: Some("Marks the dependency is optional when being inherited from the top-level."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "target": SchemaField { comment: Some("The target of the depended on task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }] }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "description": SchemaField { comment: Some("A human-readable description about the task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "env": SchemaField { comment: Some("A mapping of environment variables that will be set when the\ntask is ran."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) } }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "extends": SchemaField { comment: Some("Extends settings from a sibling task by ID."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "globalInputs": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, deprecated: None, env_var: None, hidden: true, nullable: false, optional: false, read_only: false, write_only: false }, "inputs": SchemaField { comment: Some("Inputs and sources that will mark the task as affected when comparing\nagainst touched files. When not provided, all files within the project\nare considered an input. When an empty list, no files are considered.\nOtherwise, an explicit list of inputs are considered."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "local": SchemaField { comment: Some("Marks the task as local only. Local tasks do not run in CI, do not have\n`options.cache` enabled, and are marked as `options.persistent`."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: Some("Use `preset` instead."), env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "options": SchemaField { comment: Some("Options to control task inheritance and execution."), schema: Schema { deprecated: None, description: Some("Options to control task inheritance and execution."), name: Some("TaskOptionsConfig"), nullable: false, ty: Struct(StructType { fields: {"affectedFiles": SchemaField { comment: Some("The pattern in which affected files will be passed to the task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: Some(["args", "env"]), format: None, max_length: None, min_length: None, pattern: None }) }] }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "affectedPassInputs": SchemaField { comment: Some("When affected and no files are matching, pass the task inputs\nas arguments to the command, instead of `.`."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "allowFailure": SchemaField { comment: Some("Allows the task to fail without failing the entire pipeline."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "cache": SchemaField { comment: Some("Caches the `outputs` of the task. Defaults to `true` if outputs\nare configured for the task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "cacheKey": SchemaField { comment: Some("A custom key to include in the cache hashing process. Can be\nused to invalidate local and remote caches."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "cacheLifetime": SchemaField { comment: Some("Lifetime to cache the task itself, in the format of \"1h\", \"30m\", etc.\nIf not defined, caches live forever, or until inputs change."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "envFile": SchemaField { comment: Some("Loads and sets environment variables from the `.env` file when\nrunning the task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: Some("TaskOptionEnvFile"), nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "inferInputs": SchemaField { comment: Some("Automatically infer inputs from file groups or environment variables\nthat were utilized within `command`, `script`, `args`, and `env`."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "interactive": SchemaField { comment: Some("Marks the task as interactive, so that it will run in isolation,\nand have direct access to stdin."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "internal": SchemaField { comment: Some("Marks the task as internal, which disables it from begin ran\nfrom the command line, but can be depended on."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "merge": SchemaField { comment: Some("The default strategy to use when merging `args`, `deps`, `env`,\n`inputs`, or `outputs` with an inherited task. Can be overridden\nwith the other field-specific merge options."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mergeArgs": SchemaField { comment: Some("The strategy to use when merging `args` with an inherited task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mergeDeps": SchemaField { comment: Some("The strategy to use when merging `deps` with an inherited task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mergeEnv": SchemaField { comment: Some("The strategy to use when merging `env` with an inherited task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mergeInputs": SchemaField { comment: Some("The strategy to use when merging `inputs` with an inherited task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mergeOutputs": SchemaField { comment: Some("The strategy to use when merging `outputs` with an inherited task."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The strategy in which to merge a specific task option."), name: Some("TaskMergeStrategy"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("append"), String("prepend"), String("preserve"), String("replace")], variants: Some({"Append": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("append") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Prepend": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("prepend") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Preserve": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("preserve") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Replace": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("replace") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "mutex": SchemaField { comment: Some("Creates an exclusive lock on a virtual resource, preventing other\ntasks using the same resource from running concurrently."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "os": SchemaField { comment: Some("The operating system in which to only run this task on."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The operating system in which to only run this task on."), name: Some("TaskOperatingSystem"), nullable: false, ty: Enum(EnumType { default_index: None, values: [String("linux"), String("macos"), String("windows")], variants: Some({"Linux": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("linux") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Macos": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("macos") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Windows": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("windows") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: Some("The operating system in which to only run this task on."), name: Some("TaskOperatingSystem"), nullable: false, ty: Enum(EnumType { default_index: None, values: [String("linux"), String("macos"), String("windows")], variants: Some({"Linux": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("linux") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Macos": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("macos") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Windows": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("windows") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "outputStyle": SchemaField { comment: Some("The style in which task output will be printed to the console."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The style in which task output will be printed to the console."), name: Some("TaskOutputStyle"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("buffer"), String("buffer-only-failure"), String("hash"), String("none"), String("stream")], variants: Some({"Buffer": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("buffer") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "BufferOnlyFailure": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("buffer-only-failure") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Hash": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("hash") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "None": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("none") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Stream": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("stream") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: Some("MOON_OUTPUT_STYLE"), hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "persistent": SchemaField { comment: Some("Marks the task as persistent (continuously running). This is ideal\nfor watchers, servers, or never-ending processes."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "priority": SchemaField { comment: Some("Marks the task with a certain priority, which determines the order\nin which it is ran within the pipeline."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The priority levels a task can be bucketed into."), name: Some("TaskPriority"), nullable: false, ty: Enum(EnumType { default_index: Some(2), values: [String("critical"), String("high"), String("normal"), String("low")], variants: Some({"Critical": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("critical") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "High": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("high") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Normal": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("normal") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Low": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("low") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "retryCount": SchemaField { comment: Some("The number of times a failing task will be retried to succeed."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Integer(IntegerType { default: None, enum_values: None, format: None, kind: U8, max: None, max_exclusive: None, min: None, min_exclusive: None, multiple_of: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: Some("MOON_RETRY_COUNT"), hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "runDepsInParallel": SchemaField { comment: Some("Runs direct task dependencies (via `deps`) in sequential order.\nThis _does not_ apply to indirect or transient dependencies."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "runFromWorkspaceRoot": SchemaField { comment: Some("Runs the task from the workspace root, instead of the project root."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "runInCI": SchemaField { comment: Some("Whether to run the task in CI or not, when executing `moon ci` or `moon run`."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: Some(["always", "affected"]), format: None, max_length: None, min_length: None, pattern: None }) }] }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "shell": SchemaField { comment: Some("Runs the task within a shell. When not defined, runs the task\ndirectly while relying on `PATH` resolution."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "timeout": SchemaField { comment: Some("The maximum time in seconds that a task can run before being cancelled."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Integer(IntegerType { default: None, enum_values: None, format: None, kind: U64, max: None, max_exclusive: None, min: None, min_exclusive: None, multiple_of: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "unixShell": SchemaField { comment: Some("The shell to run the task in when on a Unix-based machine."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("A list of available shells on Unix."), name: Some("TaskUnixShell"), nullable: false, ty: Enum(EnumType { default_index: Some(0), values: [String("bash"), String("elvish"), String("fish"), String("ion"), String("murex"), String("nu"), String("pwsh"), String("xonsh"), String("zsh")], variants: Some({"Bash": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("bash") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Elvish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("elvish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Fish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("fish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Ion": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("ion") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Murex": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("murex") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Nu": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("nu") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Pwsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("pwsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Xonsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("xonsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Zsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("zsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "windowsShell": SchemaField { comment: Some("The shell to run the task in when on a Windows machine."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("A list of available shells on Windows."), name: Some("TaskWindowsShell"), nullable: false, ty: Enum(EnumType { default_index: Some(5), values: [String("bash"), String("elvish"), String("fish"), String("murex"), String("nu"), String("pwsh"), String("xonsh")], variants: Some({"Bash": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("bash") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Elvish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("elvish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Fish": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("fish") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Murex": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("murex") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Nu": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("nu") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Pwsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("pwsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Xonsh": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("xonsh") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "outputs": SchemaField { comment: Some("Outputs that will be created when the task has successfully ran.\nWhen `cache` is enabled, the outputs will be persisted for subsequent runs."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "platform": SchemaField { comment: Some("The platform in which the task will be ran in. The platform determines\navailable binaries, lookup paths, and more. When not provided, will\nbe automatically detected."), schema: Schema { deprecated: None, description: Some("Platforms that each programming language can belong to."), name: Some("PlatformType"), nullable: false, ty: Enum(EnumType { default_index: Some(6), values: [String("bun"), String("deno"), String("node"), String("python"), String("rust"), String("system"), String("unknown")], variants: Some({"Bun": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("bun") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Deno": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("deno") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Node": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("node") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Python": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("python") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Rust": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("rust") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "System": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("system") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Unknown": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("unknown") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "preset": SchemaField { comment: Some("The preset to apply for the task. Will inherit default options."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Preset options to inherit."), name: Some("TaskPreset"), nullable: false, ty: Enum(EnumType { default_index: None, values: [String("server"), String("watcher")], variants: Some({"Server": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("server") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Watcher": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("watcher") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "script": SchemaField { comment: Some("A script to run within a shell. A script is anything from a single command,\nto multiple commands (&&, etc), or shell specific syntax. Does not support\narguments, merging, or inheritance."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "toolchain": SchemaField { comment: Some("The toolchain(s) in which the task will be ran in. The toolchain determines\navailable binaries, lookup paths, and more. When not provided, will\nbe automatically detected."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "type": SchemaField { comment: Some("The type of task, primarily used for categorical reasons. When not provided,\nwill be automatically determined."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("The type of task."), name: Some("TaskType"), nullable: false, ty: Enum(EnumType { default_index: Some(2), values: [String("build"), String("run"), String("test")], variants: Some({"Build": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("build") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Run": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("run") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Test": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("test") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "toolchain": SchemaField { comment: Some("Overrides top-level toolchain settings, scoped to this project."), schema: Schema { deprecated: None, description: Some("Overrides top-level toolchain settings, scoped to this project."), name: Some("ProjectToolchainConfig"), nullable: false, ty: Struct(StructType { fields: {"bun": SchemaField { comment: Some("Overrides `bun` settings."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Overrides top-level toolchain settings."), name: Some("ProjectToolchainCommonToolConfig"), nullable: false, ty: Struct(StructType { fields: {"version": SchemaField { comment: Some("Version of the tool this project will use."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Represents an unresolved version or alias that must be resolved to a fully-qualified version."), name: Some("UnresolvedVersionSpec"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "default": SchemaField { comment: Some("The default toolchain(s) for all tasks within the project,\nif their toolchain is unknown."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }] }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "deno": SchemaField { comment: Some("Overrides `deno` settings."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Overrides top-level toolchain settings."), name: Some("ProjectToolchainCommonToolConfig"), nullable: false, ty: Struct(StructType { fields: {"version": SchemaField { comment: Some("Version of the tool this project will use."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Represents an unresolved version or alias that must be resolved to a fully-qualified version."), name: Some("UnresolvedVersionSpec"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "node": SchemaField { comment: Some("Overrides `node` settings."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Overrides top-level toolchain settings."), name: Some("ProjectToolchainCommonToolConfig"), nullable: false, ty: Struct(StructType { fields: {"version": SchemaField { comment: Some("Version of the tool this project will use."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Represents an unresolved version or alias that must be resolved to a fully-qualified version."), name: Some("UnresolvedVersionSpec"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "plugins": SchemaField { comment: Some("Overrides toolchains by their ID."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: Some("ProjectToolchainEntry"), nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, Schema { deprecated: None, description: Some("Configures an individual toolchain."), name: Some("ToolchainPluginConfig"), nullable: false, ty: Struct(StructType { fields: {"config": SchemaField { comment: Some("Arbitrary configuration that'll be passed to the WASM plugin."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Unknown } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "disabled": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Boolean(BooleanType { default: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "plugin": SchemaField { comment: Some("Location of the WASM plugin to use."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Strategies and protocols for locating plugins."), name: Some("PluginLocator"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "version": SchemaField { comment: Some("The version of the toolchain to download and install."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Represents an unresolved version or alias that must be resolved to a fully-qualified version."), name: Some("UnresolvedVersionSpec"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }] }) } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "python": SchemaField { comment: Some("Overrides `python` settings."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Overrides top-level toolchain settings."), name: Some("ProjectToolchainCommonToolConfig"), nullable: false, ty: Struct(StructType { fields: {"version": SchemaField { comment: Some("Version of the tool this project will use."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Represents an unresolved version or alias that must be resolved to a fully-qualified version."), name: Some("UnresolvedVersionSpec"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "rust": SchemaField { comment: Some("Overrides `rust` settings."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: true, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Overrides top-level toolchain settings."), name: Some("ProjectToolchainCommonToolConfig"), nullable: false, ty: Struct(StructType { fields: {"version": SchemaField { comment: Some("Version of the tool this project will use."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: Some("Represents an unresolved version or alias that must be resolved to a fully-qualified version."), name: Some("UnresolvedVersionSpec"), nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "type": SchemaField { comment: Some("The type of project."), schema: Schema { deprecated: None, description: Some("The type of project, for categorizing."), name: Some("ProjectType"), nullable: false, ty: Enum(EnumType { default_index: Some(6), values: [String("application"), String("automation"), String("configuration"), String("library"), String("scaffolding"), String("tool"), String("unknown")], variants: Some({"Application": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("application") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Automation": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("automation") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Configuration": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("configuration") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Library": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("library") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Scaffolding": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("scaffolding") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Tool": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("tool") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "Unknown": SchemaField { comment: None, schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Literal(LiteralType { format: None, value: String("unknown") }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}) }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "workspace": SchemaField { comment: Some("Overrides top-level workspace settings, scoped to this project."), schema: Schema { deprecated: None, description: Some("Overrides top-level workspace settings, scoped to this project."), name: Some("ProjectWorkspaceConfig"), nullable: false, ty: Struct(StructType { fields: {"inheritedTasks": SchemaField { comment: Some("Controls how tasks are inherited."), schema: Schema { deprecated: None, description: Some("Controls how tasks are inherited."), name: Some("ProjectWorkspaceInheritedTasksConfig"), nullable: false, ty: Struct(StructType { fields: {"exclude": SchemaField { comment: Some("Excludes inheriting tasks by ID."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }, "include": SchemaField { comment: Some("Only inherits tasks by ID, and ignores the rest.\nWhen not defined, inherits all matching tasks.\nWhen an empty list, inherits no tasks."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Union(UnionType { default_index: None, partial: false, operator: AnyOf, variants_types: [Schema { deprecated: None, description: None, name: None, nullable: false, ty: Array(ArrayType { contains: None, items_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_contains: None, max_length: None, min_contains: None, min_length: None, unique: None }) }, Schema { deprecated: None, description: None, name: None, nullable: false, ty: Null }] }) }, deprecated: None, env_var: None, hidden: false, nullable: true, optional: false, read_only: false, write_only: false }, "rename": SchemaField { comment: Some("Renames inherited tasks to a new ID."), schema: Schema { deprecated: None, description: None, name: None, nullable: false, ty: Object(ObjectType { key_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) }, max_length: None, min_length: None, required: None, value_type: Schema { deprecated: None, description: None, name: None, nullable: false, ty: String(StringType { default: None, enum_values: None, format: None, max_length: None, min_length: None, pattern: None }) } }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}, partial: true, required: None }) }, deprecated: None, env_var: None, hidden: false, nullable: false, optional: false, read_only: false, write_only: false }}, partial: false, required: None })
[2m2025-05-30T15:38:29.338807Z[0m [34mDEBUG[0m Created struct class 'ProjectConfig' with 16 properties
[2m2025-05-30T15:38:29.338933Z[0m [34mDEBUG[0m Final PklType for 'ProjectConfig': kind=Class, properties=16, enum_values=None
[2m2025-05-30T15:38:29.339072Z[0m [34mDEBUG[0m Rendering type 'DependencyScope': kind=TypeAlias, properties=0, enum_values=Some("\"build\" | \"development\" | \"peer\" | \"production\" | \"root\"")
[2m2025-05-30T15:38:29.339208Z[0m [34mDEBUG[0m Serialized PklType 'DependencyScope': {"name":"DependencyScope","documentation":"The scope and or relationship of the dependency.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"\"build\" | \"development\" | \"peer\" | \"production\" | \"root\""}
[2m2025-05-30T15:38:29.339390Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.339445Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.339506Z[0m [34mDEBUG[0m Rendered class 'DependencyScope': /// The scope and or relationship of the dependency.
typealias DependencyScope = "build" | "development" | "peer" | "production" | "root"

[2m2025-05-30T15:38:29.339549Z[0m [34mDEBUG[0m Rendering type 'DependencySource': kind=TypeAlias, properties=0, enum_values=Some("\"explicit\" | \"implicit\"")
[2m2025-05-30T15:38:29.339578Z[0m [34mDEBUG[0m Serialized PklType 'DependencySource': {"name":"DependencySource","documentation":"The source where the dependency comes from. Either explicitly\ndefined in configuration, or implicitly derived from source files.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"\"explicit\" | \"implicit\""}
[2m2025-05-30T15:38:29.339653Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.339687Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.339729Z[0m [34mDEBUG[0m Rendered class 'DependencySource': /// The source where the dependency comes from. Either explicitly
/// defined in configuration, or implicitly derived from source files.
typealias DependencySource = "explicit" | "implicit"

[2m2025-05-30T15:38:29.339757Z[0m [34mDEBUG[0m Rendering type 'DependencyConfig': kind=Class, properties=4, enum_values=None
[2m2025-05-30T15:38:29.339804Z[0m [34mDEBUG[0m Serialized PklType 'DependencyConfig': {"name":"DependencyConfig","documentation":"Expanded information about a project dependency.","kind":"Class","properties":[{"name":"id","type_name":"String","documentation":null,"optional":false,"default":null,"constraints":[],"examples":["\"example\""]},{"name":"scope","type_name":"DependencyScope","documentation":"The scope and or relationship of the dependency.","optional":false,"default":null,"constraints":[],"examples":["\"build\"","\"development\"","\"peer\""]},{"name":"source","type_name":"DependencySource","documentation":"The source where the dependency comes from. Either explicitly\ndefined in configuration, or implicitly derived from source files.","optional":false,"default":null,"constraints":[],"examples":["\"explicit\"","\"implicit\""]},{"name":"via","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]}],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.340013Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.340058Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.340389Z[0m [34mDEBUG[0m Rendered class 'DependencyConfig': /// Expanded information about a project dependency.
class DependencyConfig {
  ///
  /// Examples:
  /// - `"example"`
  id: String/// The scope and or relationship of the dependency.

  ///
  /// Examples:
  /// - `"build"`
  /// - `"development"`
  /// - `"peer"`
  scope: DependencyScope/// The source where the dependency comes from. Either explicitly
/// defined in configuration, or implicitly derived from source files.

  ///
  /// Examples:
  /// - `"explicit"`
  /// - `"implicit"`
  source: DependencySource  via: String?}

[2m2025-05-30T15:38:29.340460Z[0m [34mDEBUG[0m Rendering type 'ProjectDependsOn': kind=TypeAlias, properties=0, enum_values=Some("String | DependencyConfig")
[2m2025-05-30T15:38:29.340485Z[0m [34mDEBUG[0m Serialized PklType 'ProjectDependsOn': {"name":"ProjectDependsOn","documentation":"Expanded information about a project dependency.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"String | DependencyConfig"}
[2m2025-05-30T15:38:29.340538Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.340550Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.340575Z[0m [34mDEBUG[0m Rendered class 'ProjectDependsOn': /// Expanded information about a project dependency.
typealias ProjectDependsOn = String | DependencyConfig

[2m2025-05-30T15:38:29.340583Z[0m [34mDEBUG[0m Rendering type 'ProjectDockerFileConfig': kind=Class, properties=3, enum_values=None
[2m2025-05-30T15:38:29.340610Z[0m [34mDEBUG[0m Serialized PklType 'ProjectDockerFileConfig': {"name":"ProjectDockerFileConfig","documentation":"Configures `Dockerfile` generation.","kind":"Class","properties":[{"name":"buildTask","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"image","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"startTask","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]}],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.340707Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.340749Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.340915Z[0m [34mDEBUG[0m Rendered class 'ProjectDockerFileConfig': /// Configures `Dockerfile` generation.
class ProjectDockerFileConfig {
  buildTask: String?  image: String?  startTask: String?}

[2m2025-05-30T15:38:29.340968Z[0m [34mDEBUG[0m Rendering type 'ProjectDockerScaffoldConfig': kind=Class, properties=1, enum_values=None
[2m2025-05-30T15:38:29.341001Z[0m [34mDEBUG[0m Serialized PklType 'ProjectDockerScaffoldConfig': {"name":"ProjectDockerScaffoldConfig","documentation":"Configures aspects of the Docker scaffolding process.","kind":"Class","properties":[{"name":"include","type_name":"Listing<String>","documentation":null,"optional":false,"default":"new Listing {}","constraints":[],"examples":["new Listing<String> {}","new Listing { \"item1\"; \"item2\" }"]}],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.341061Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.341108Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.341231Z[0m [34mDEBUG[0m Rendered class 'ProjectDockerScaffoldConfig': /// Configures aspects of the Docker scaffolding process.
class ProjectDockerScaffoldConfig {
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  include: Listing<String> = new Listing {}
}

[2m2025-05-30T15:38:29.341281Z[0m [34mDEBUG[0m Rendering type 'ProjectDockerConfig': kind=Class, properties=2, enum_values=None
[2m2025-05-30T15:38:29.341315Z[0m [34mDEBUG[0m Serialized PklType 'ProjectDockerConfig': {"name":"ProjectDockerConfig","documentation":"Configures our Docker integration.","kind":"Class","properties":[{"name":"file","type_name":"ProjectDockerFileConfig","documentation":"Configures `Dockerfile` generation.","optional":false,"default":null,"constraints":[],"examples":[]},{"name":"scaffold","type_name":"ProjectDockerScaffoldConfig","documentation":"Configures aspects of the Docker scaffolding process.","optional":false,"default":null,"constraints":[],"examples":[]}],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.341377Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.341425Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.341567Z[0m [34mDEBUG[0m Rendered class 'ProjectDockerConfig': /// Configures our Docker integration.
class ProjectDockerConfig {
/// Configures `Dockerfile` generation.

  file: ProjectDockerFileConfig/// Configures aspects of the Docker scaffolding process.

  scaffold: ProjectDockerScaffoldConfig}

[2m2025-05-30T15:38:29.341613Z[0m [34mDEBUG[0m Rendering type 'LanguageType': kind=TypeAlias, properties=0, enum_values=Some("\"bash\" | \"batch\" | \"go\" | \"javascript\" | \"php\" | \"python\" | \"ruby\" | \"rust\" | \"typescript\" | \"unknown\"")
[2m2025-05-30T15:38:29.341640Z[0m [34mDEBUG[0m Serialized PklType 'LanguageType': {"name":"LanguageType","documentation":"Supported programming languages that each project can be written in.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"\"bash\" | \"batch\" | \"go\" | \"javascript\" | \"php\" | \"python\" | \"ruby\" | \"rust\" | \"typescript\" | \"unknown\""}
[2m2025-05-30T15:38:29.341696Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.341750Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.341781Z[0m [34mDEBUG[0m Rendered class 'LanguageType': /// Supported programming languages that each project can be written in.
typealias LanguageType = "bash" | "batch" | "go" | "javascript" | "php" | "python" | "ruby" | "rust" | "typescript" | "unknown"

[2m2025-05-30T15:38:29.341790Z[0m [34mDEBUG[0m Rendering type 'OwnersPaths': kind=TypeAlias, properties=0, enum_values=Some("Listing<String> | Mapping<String, Listing<String>>")
[2m2025-05-30T15:38:29.341807Z[0m [34mDEBUG[0m Serialized PklType 'OwnersPaths': {"name":"OwnersPaths","documentation":"A mapping of file paths and file globs to owners.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"Listing<String> | Mapping<String, Listing<String>>"}
[2m2025-05-30T15:38:29.341839Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.341864Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.341891Z[0m [34mDEBUG[0m Rendered class 'OwnersPaths': /// A mapping of file paths and file globs to owners.
typealias OwnersPaths = Listing<String> | Mapping<String, Listing<String>>

[2m2025-05-30T15:38:29.341899Z[0m [34mDEBUG[0m Rendering type 'OwnersConfig': kind=Class, properties=5, enum_values=None
[2m2025-05-30T15:38:29.341942Z[0m [34mDEBUG[0m Serialized PklType 'OwnersConfig': {"name":"OwnersConfig","documentation":"Defines ownership of source code within the current project, by mapping\nfile paths and globs to owners. An owner is either a user, team, or group.","kind":"Class","properties":[{"name":"customGroups","type_name":"Mapping<String, Listing<String>>","documentation":null,"optional":false,"default":"new Mapping {}","constraints":[],"examples":["new Mapping<String, Listing<String>> {}"]},{"name":"defaultOwner","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"optional","type_name":"Boolean","documentation":null,"optional":false,"default":"false","constraints":[],"examples":["true","false"]},{"name":"paths","type_name":"Listing<String> | Mapping<String, Listing<String>>","documentation":"A mapping of file paths and file globs to owners.","optional":false,"default":null,"constraints":[],"examples":[]},{"name":"requiredApprovals","type_name":"Int?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]}],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.342053Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.342107Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.342363Z[0m [34mDEBUG[0m Rendered class 'OwnersConfig': /// Defines ownership of source code within the current project, by mapping
/// file paths and globs to owners. An owner is either a user, team, or group.
class OwnersConfig {
  ///
  /// Examples:
  /// - `new Mapping<String, Listing<String>> {}`
  customGroups: Mapping<String, Listing<String>> = new Mapping {}
  defaultOwner: String?  ///
  /// Examples:
  /// - `true`
  /// - `false`
  optional: Boolean = false
/// A mapping of file paths and file globs to owners.

  paths: Listing<String> | Mapping<String, Listing<String>>  requiredApprovals: Int?}

[2m2025-05-30T15:38:29.342428Z[0m [34mDEBUG[0m Rendering type 'PlatformType': kind=TypeAlias, properties=0, enum_values=Some("\"bun\" | \"deno\" | \"node\" | \"python\" | \"rust\" | \"system\" | \"unknown\"")
[2m2025-05-30T15:38:29.342456Z[0m [34mDEBUG[0m Serialized PklType 'PlatformType': {"name":"PlatformType","documentation":"Platforms that each programming language can belong to.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"\"bun\" | \"deno\" | \"node\" | \"python\" | \"rust\" | \"system\" | \"unknown\""}
[2m2025-05-30T15:38:29.342503Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.342550Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.342585Z[0m [34mDEBUG[0m Rendered class 'PlatformType': /// Platforms that each programming language can belong to.
typealias PlatformType = "bun" | "deno" | "node" | "python" | "rust" | "system" | "unknown"

[2m2025-05-30T15:38:29.342594Z[0m [34mDEBUG[0m Rendering type 'ProjectMetadataConfig': kind=Class, properties=6, enum_values=None
[2m2025-05-30T15:38:29.342658Z[0m [34mDEBUG[0m Serialized PklType 'ProjectMetadataConfig': {"name":"ProjectMetadataConfig","documentation":"Expanded information about the project.","kind":"Class","properties":[{"name":"channel","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"description","type_name":"String","documentation":null,"optional":false,"default":null,"constraints":[],"examples":["\"example\""]},{"name":"maintainers","type_name":"Listing<String>","documentation":null,"optional":false,"default":"new Listing {}","constraints":[],"examples":["new Listing<String> {}","new Listing { \"item1\"; \"item2\" }"]},{"name":"metadata","type_name":"Mapping<String, Any>","documentation":null,"optional":false,"default":"new Mapping {}","constraints":[],"examples":["new Mapping<String, Any> {}"]},{"name":"name","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"owner","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]}],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.342786Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.342842Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.343210Z[0m [34mDEBUG[0m Rendered class 'ProjectMetadataConfig': /// Expanded information about the project.
class ProjectMetadataConfig {
  channel: String?  ///
  /// Examples:
  /// - `"example"`
  description: String  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  maintainers: Listing<String> = new Listing {}
  ///
  /// Examples:
  /// - `new Mapping<String, Any> {}`
  metadata: Mapping<String, Any> = new Mapping {}
  name: String?  owner: String?}

[2m2025-05-30T15:38:29.343278Z[0m [34mDEBUG[0m Rendering type 'StackType': kind=TypeAlias, properties=0, enum_values=Some("\"backend\" | \"frontend\" | \"infrastructure\" | \"systems\" | \"unknown\"")
[2m2025-05-30T15:38:29.343307Z[0m [34mDEBUG[0m Serialized PklType 'StackType': {"name":"StackType","documentation":"The technology stack of the project, for categorizing.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"\"backend\" | \"frontend\" | \"infrastructure\" | \"systems\" | \"unknown\""}
[2m2025-05-30T15:38:29.343361Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.343371Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.343396Z[0m [34mDEBUG[0m Rendered class 'StackType': /// The technology stack of the project, for categorizing.
typealias StackType = "backend" | "frontend" | "infrastructure" | "systems" | "unknown"

[2m2025-05-30T15:38:29.343406Z[0m [34mDEBUG[0m Rendering type 'TaskArgs': kind=TypeAlias, properties=0, enum_values=Some("Null | String | Listing<String>")
[2m2025-05-30T15:38:29.343421Z[0m [34mDEBUG[0m Serialized PklType 'TaskArgs': {"name":"TaskArgs","documentation":"Configures a command to execute, and its arguments.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"Null | String | Listing<String>"}
[2m2025-05-30T15:38:29.343456Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.343464Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.343485Z[0m [34mDEBUG[0m Rendered class 'TaskArgs': /// Configures a command to execute, and its arguments.
typealias TaskArgs = Null | String | Listing<String>

[2m2025-05-30T15:38:29.343507Z[0m [34mDEBUG[0m Rendering type 'TaskDependencyConfig': kind=Class, properties=4, enum_values=None
[2m2025-05-30T15:38:29.343537Z[0m [34mDEBUG[0m Serialized PklType 'TaskDependencyConfig': {"name":"TaskDependencyConfig","documentation":"Expanded information about a task dependency.","kind":"Class","properties":[{"name":"args","type_name":"(String | Listing<String>)?","documentation":"Configures a command to execute, and its arguments.","optional":false,"default":null,"constraints":[],"examples":[]},{"name":"env","type_name":"Mapping<String, String>","documentation":null,"optional":false,"default":"new Mapping {}","constraints":[],"examples":["new Mapping<String, String> {}"]},{"name":"optional","type_name":"Boolean?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"target","type_name":"String","documentation":null,"optional":false,"default":null,"constraints":[],"examples":["\"example\""]}],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.343610Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.343665Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.343933Z[0m [34mDEBUG[0m Rendered class 'TaskDependencyConfig': /// Expanded information about a task dependency.
class TaskDependencyConfig {
/// Configures a command to execute, and its arguments.

  args: (String | Listing<String>)?  ///
  /// Examples:
  /// - `new Mapping<String, String> {}`
  env: Mapping<String, String> = new Mapping {}
  optional: Boolean?  ///
  /// Examples:
  /// - `"example"`
  target: String}

[2m2025-05-30T15:38:29.344001Z[0m [34mDEBUG[0m Rendering type 'TaskDependency': kind=TypeAlias, properties=0, enum_values=Some("String | TaskDependencyConfig")
[2m2025-05-30T15:38:29.344029Z[0m [34mDEBUG[0m Serialized PklType 'TaskDependency': {"name":"TaskDependency","documentation":"Configures another task that a task depends on.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"String | TaskDependencyConfig"}
[2m2025-05-30T15:38:29.344081Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.344107Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.344137Z[0m [34mDEBUG[0m Rendered class 'TaskDependency': /// Configures another task that a task depends on.
typealias TaskDependency = String | TaskDependencyConfig

[2m2025-05-30T15:38:29.344146Z[0m [34mDEBUG[0m Rendering type 'TaskOptionEnvFile': kind=TypeAlias, properties=0, enum_values=Some("Boolean | String | Listing<String>")
[2m2025-05-30T15:38:29.344163Z[0m [34mDEBUG[0m Serialized PklType 'TaskOptionEnvFile': {"name":"TaskOptionEnvFile","documentation":null,"kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"Boolean | String | Listing<String>"}
[2m2025-05-30T15:38:29.344190Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.344217Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.344245Z[0m [34mDEBUG[0m Rendered class 'TaskOptionEnvFile': typealias TaskOptionEnvFile = Boolean | String | Listing<String>

[2m2025-05-30T15:38:29.344253Z[0m [34mDEBUG[0m Rendering type 'TaskMergeStrategy': kind=TypeAlias, properties=0, enum_values=Some("\"append\" | \"prepend\" | \"preserve\" | \"replace\"")
[2m2025-05-30T15:38:29.344272Z[0m [34mDEBUG[0m Serialized PklType 'TaskMergeStrategy': {"name":"TaskMergeStrategy","documentation":"The strategy in which to merge a specific task option.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"\"append\" | \"prepend\" | \"preserve\" | \"replace\""}
[2m2025-05-30T15:38:29.344305Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.344313Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.344334Z[0m [34mDEBUG[0m Rendered class 'TaskMergeStrategy': /// The strategy in which to merge a specific task option.
typealias TaskMergeStrategy = "append" | "prepend" | "preserve" | "replace"

[2m2025-05-30T15:38:29.344370Z[0m [34mDEBUG[0m Rendering type 'TaskOperatingSystem': kind=TypeAlias, properties=0, enum_values=Some("\"linux\" | \"macos\" | \"windows\"")
[2m2025-05-30T15:38:29.344390Z[0m [34mDEBUG[0m Serialized PklType 'TaskOperatingSystem': {"name":"TaskOperatingSystem","documentation":"The operating system in which to only run this task on.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"\"linux\" | \"macos\" | \"windows\""}
[2m2025-05-30T15:38:29.344421Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.344429Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.344449Z[0m [34mDEBUG[0m Rendered class 'TaskOperatingSystem': /// The operating system in which to only run this task on.
typealias TaskOperatingSystem = "linux" | "macos" | "windows"

[2m2025-05-30T15:38:29.344457Z[0m [34mDEBUG[0m Rendering type 'TaskOutputStyle': kind=TypeAlias, properties=0, enum_values=Some("\"buffer\" | \"buffer-only-failure\" | \"hash\" | \"none\" | \"stream\"")
[2m2025-05-30T15:38:29.344472Z[0m [34mDEBUG[0m Serialized PklType 'TaskOutputStyle': {"name":"TaskOutputStyle","documentation":"The style in which task output will be printed to the console.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"\"buffer\" | \"buffer-only-failure\" | \"hash\" | \"none\" | \"stream\""}
[2m2025-05-30T15:38:29.344499Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.344507Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.344527Z[0m [34mDEBUG[0m Rendered class 'TaskOutputStyle': /// The style in which task output will be printed to the console.
typealias TaskOutputStyle = "buffer" | "buffer-only-failure" | "hash" | "none" | "stream"

[2m2025-05-30T15:38:29.344535Z[0m [34mDEBUG[0m Rendering type 'TaskPriority': kind=TypeAlias, properties=0, enum_values=Some("\"critical\" | \"high\" | \"normal\" | \"low\"")
[2m2025-05-30T15:38:29.344551Z[0m [34mDEBUG[0m Serialized PklType 'TaskPriority': {"name":"TaskPriority","documentation":"The priority levels a task can be bucketed into.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"\"critical\" | \"high\" | \"normal\" | \"low\""}
[2m2025-05-30T15:38:29.344579Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.344588Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.344609Z[0m [34mDEBUG[0m Rendered class 'TaskPriority': /// The priority levels a task can be bucketed into.
typealias TaskPriority = "critical" | "high" | "normal" | "low"

[2m2025-05-30T15:38:29.344617Z[0m [34mDEBUG[0m Rendering type 'TaskUnixShell': kind=TypeAlias, properties=0, enum_values=Some("\"bash\" | \"elvish\" | \"fish\" | \"ion\" | \"murex\" | \"nu\" | \"pwsh\" | \"xonsh\" | \"zsh\"")
[2m2025-05-30T15:38:29.344634Z[0m [34mDEBUG[0m Serialized PklType 'TaskUnixShell': {"name":"TaskUnixShell","documentation":"A list of available shells on Unix.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"\"bash\" | \"elvish\" | \"fish\" | \"ion\" | \"murex\" | \"nu\" | \"pwsh\" | \"xonsh\" | \"zsh\""}
[2m2025-05-30T15:38:29.344662Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.344670Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.344689Z[0m [34mDEBUG[0m Rendered class 'TaskUnixShell': /// A list of available shells on Unix.
typealias TaskUnixShell = "bash" | "elvish" | "fish" | "ion" | "murex" | "nu" | "pwsh" | "xonsh" | "zsh"

[2m2025-05-30T15:38:29.344697Z[0m [34mDEBUG[0m Rendering type 'TaskWindowsShell': kind=TypeAlias, properties=0, enum_values=Some("\"bash\" | \"elvish\" | \"fish\" | \"murex\" | \"nu\" | \"pwsh\" | \"xonsh\"")
[2m2025-05-30T15:38:29.344725Z[0m [34mDEBUG[0m Serialized PklType 'TaskWindowsShell': {"name":"TaskWindowsShell","documentation":"A list of available shells on Windows.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"\"bash\" | \"elvish\" | \"fish\" | \"murex\" | \"nu\" | \"pwsh\" | \"xonsh\""}
[2m2025-05-30T15:38:29.344758Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.344767Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.344789Z[0m [34mDEBUG[0m Rendered class 'TaskWindowsShell': /// A list of available shells on Windows.
typealias TaskWindowsShell = "bash" | "elvish" | "fish" | "murex" | "nu" | "pwsh" | "xonsh"

[2m2025-05-30T15:38:29.344799Z[0m [34mDEBUG[0m Rendering type 'TaskOptionsConfig': kind=Class, properties=29, enum_values=None
[2m2025-05-30T15:38:29.344905Z[0m [34mDEBUG[0m Serialized PklType 'TaskOptionsConfig': {"name":"TaskOptionsConfig","documentation":"Options to control task inheritance and execution.","kind":"Class","properties":[{"name":"affectedFiles","type_name":"Boolean | String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"affectedPassInputs","type_name":"Boolean?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"allowFailure","type_name":"Boolean?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"cache","type_name":"Boolean?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"cacheKey","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"cacheLifetime","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"envFile","type_name":"Boolean | String | Listing<String>?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"inferInputs","type_name":"Boolean?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"interactive","type_name":"Boolean?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"internal","type_name":"Boolean?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"merge","type_name":"TaskMergeStrategy?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"mergeArgs","type_name":"TaskMergeStrategy?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"mergeDeps","type_name":"TaskMergeStrategy?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"mergeEnv","type_name":"TaskMergeStrategy?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"mergeInputs","type_name":"TaskMergeStrategy?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"mergeOutputs","type_name":"TaskMergeStrategy?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"mutex","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"os","type_name":"TaskOperatingSystem | Listing<TaskOperatingSystem>?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"outputStyle","type_name":"TaskOutputStyle?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"persistent","type_name":"Boolean?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"priority","type_name":"TaskPriority?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"retryCount","type_name":"Int?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"runDepsInParallel","type_name":"Boolean?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"runFromWorkspaceRoot","type_name":"Boolean?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"runInCI","type_name":"Boolean | String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"shell","type_name":"Boolean?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"timeout","type_name":"Int?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"unixShell","type_name":"TaskUnixShell?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"windowsShell","type_name":"TaskWindowsShell?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]}],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.345233Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.345282Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.347403Z[0m [34mDEBUG[0m Rendered class 'TaskOptionsConfig': /// Options to control task inheritance and execution.
class TaskOptionsConfig {
  affectedFiles: Boolean | String?  affectedPassInputs: Boolean?  allowFailure: Boolean?  cache: Boolean?  cacheKey: String?  cacheLifetime: String?  envFile: Boolean | String | Listing<String>?  inferInputs: Boolean?  interactive: Boolean?  internal: Boolean?  merge: TaskMergeStrategy?  mergeArgs: TaskMergeStrategy?  mergeDeps: TaskMergeStrategy?  mergeEnv: TaskMergeStrategy?  mergeInputs: TaskMergeStrategy?  mergeOutputs: TaskMergeStrategy?  mutex: String?  os: TaskOperatingSystem | Listing<TaskOperatingSystem>?  outputStyle: TaskOutputStyle?  persistent: Boolean?  priority: TaskPriority?  retryCount: Int?  runDepsInParallel: Boolean?  runFromWorkspaceRoot: Boolean?  runInCI: Boolean | String?  shell: Boolean?  timeout: Int?  unixShell: TaskUnixShell?  windowsShell: TaskWindowsShell?}

[2m2025-05-30T15:38:29.347510Z[0m [34mDEBUG[0m Rendering type 'TaskPreset': kind=TypeAlias, properties=0, enum_values=Some("\"server\" | \"watcher\"")
[2m2025-05-30T15:38:29.347550Z[0m [34mDEBUG[0m Serialized PklType 'TaskPreset': {"name":"TaskPreset","documentation":"Preset options to inherit.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"\"server\" | \"watcher\""}
[2m2025-05-30T15:38:29.347629Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.347640Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.347672Z[0m [34mDEBUG[0m Rendered class 'TaskPreset': /// Preset options to inherit.
typealias TaskPreset = "server" | "watcher"

[2m2025-05-30T15:38:29.347685Z[0m [34mDEBUG[0m Rendering type 'TaskType': kind=TypeAlias, properties=0, enum_values=Some("\"build\" | \"run\" | \"test\"")
[2m2025-05-30T15:38:29.347704Z[0m [34mDEBUG[0m Serialized PklType 'TaskType': {"name":"TaskType","documentation":"The type of task.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"\"build\" | \"run\" | \"test\""}
[2m2025-05-30T15:38:29.347739Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.347747Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.347793Z[0m [34mDEBUG[0m Rendered class 'TaskType': /// The type of task.
typealias TaskType = "build" | "run" | "test"

[2m2025-05-30T15:38:29.349267Z[0m [34mDEBUG[0m Rendering type 'TaskConfig': kind=Class, properties=16, enum_values=None
[2m2025-05-30T15:38:29.349587Z[0m [34mDEBUG[0m Serialized PklType 'TaskConfig': {"name":"TaskConfig","documentation":"Configures a task to be ran within the action pipeline.","kind":"Class","properties":[{"name":"args","type_name":"(String | Listing<String>)?","documentation":"Configures a command to execute, and its arguments.","optional":false,"default":null,"constraints":[],"examples":[]},{"name":"command","type_name":"(String | Listing<String>)?","documentation":"Configures a command to execute, and its arguments.","optional":false,"default":null,"constraints":[],"examples":[]},{"name":"deps","type_name":"Listing<String | TaskDependencyConfig>?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"description","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"env","type_name":"Mapping<String, String>?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"extends","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"globalInputs","type_name":"Listing<String>","documentation":null,"optional":false,"default":"new Listing {}","constraints":[],"examples":["new Listing<String> {}","new Listing { \"item1\"; \"item2\" }"]},{"name":"inputs","type_name":"Listing<String>?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"local","type_name":"Boolean?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"options","type_name":"TaskOptionsConfig","documentation":"Options to control task inheritance and execution.","optional":false,"default":null,"constraints":[],"examples":[]},{"name":"outputs","type_name":"Listing<String>?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"platform","type_name":"PlatformType","documentation":"Platforms that each programming language can belong to.","optional":false,"default":null,"constraints":[],"examples":["\"bun\"","\"deno\"","\"node\""]},{"name":"preset","type_name":"TaskPreset?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"script","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"toolchain","type_name":"String | Listing<String>","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"type","type_name":"TaskType?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]}],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.350167Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.350204Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.351967Z[0m [34mDEBUG[0m Rendered class 'TaskConfig': /// Configures a task to be ran within the action pipeline.
class TaskConfig {
/// Configures a command to execute, and its arguments.

  args: (String | Listing<String>)?/// Configures a command to execute, and its arguments.

  command: (String | Listing<String>)?  deps: Listing<String | TaskDependencyConfig>?  description: String?  env: Mapping<String, String>?  extends: String?  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  globalInputs: Listing<String> = new Listing {}
  inputs: Listing<String>?  local: Boolean?/// Options to control task inheritance and execution.

  options: TaskOptionsConfig  outputs: Listing<String>?/// Platforms that each programming language can belong to.

  ///
  /// Examples:
  /// - `"bun"`
  /// - `"deno"`
  /// - `"node"`
  platform: PlatformType  preset: TaskPreset?  script: String?  toolchain: String | Listing<String>  type: TaskType?}

[2m2025-05-30T15:38:29.352087Z[0m [34mDEBUG[0m Rendering type 'UnresolvedVersionSpec': kind=Class, properties=0, enum_values=None
[2m2025-05-30T15:38:29.352138Z[0m [34mDEBUG[0m Serialized PklType 'UnresolvedVersionSpec': {"name":"UnresolvedVersionSpec","documentation":"Represents an unresolved version or alias that must be resolved to a fully-qualified version.","kind":"Class","properties":[],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.352227Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.352256Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.352295Z[0m [34mDEBUG[0m Rendered class 'UnresolvedVersionSpec': /// Represents an unresolved version or alias that must be resolved to a fully-qualified version.
class UnresolvedVersionSpec {
}

[2m2025-05-30T15:38:29.352304Z[0m [34mDEBUG[0m Rendering type 'ProjectToolchainCommonToolConfig': kind=Class, properties=1, enum_values=None
[2m2025-05-30T15:38:29.352327Z[0m [34mDEBUG[0m Serialized PklType 'ProjectToolchainCommonToolConfig': {"name":"ProjectToolchainCommonToolConfig","documentation":"Overrides top-level toolchain settings.","kind":"Class","properties":[{"name":"version","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]}],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.352370Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.352378Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.352469Z[0m [34mDEBUG[0m Rendered class 'ProjectToolchainCommonToolConfig': /// Overrides top-level toolchain settings.
class ProjectToolchainCommonToolConfig {
  version: String?}

[2m2025-05-30T15:38:29.352480Z[0m [34mDEBUG[0m Rendering type 'PluginLocator': kind=Class, properties=0, enum_values=None
[2m2025-05-30T15:38:29.352497Z[0m [34mDEBUG[0m Serialized PklType 'PluginLocator': {"name":"PluginLocator","documentation":"Strategies and protocols for locating plugins.","kind":"Class","properties":[],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.352533Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.352541Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.352568Z[0m [34mDEBUG[0m Rendered class 'PluginLocator': /// Strategies and protocols for locating plugins.
class PluginLocator {
}

[2m2025-05-30T15:38:29.352576Z[0m [34mDEBUG[0m Rendering type 'ToolchainPluginConfig': kind=Class, properties=4, enum_values=None
[2m2025-05-30T15:38:29.352609Z[0m [34mDEBUG[0m Serialized PklType 'ToolchainPluginConfig': {"name":"ToolchainPluginConfig","documentation":"Configures an individual toolchain.","kind":"Class","properties":[{"name":"config","type_name":"Mapping<String, Any>","documentation":null,"optional":false,"default":"new Mapping {}","constraints":[],"examples":["new Mapping<String, Any> {}"]},{"name":"disabled","type_name":"Boolean","documentation":null,"optional":false,"default":"false","constraints":[],"examples":["true","false"]},{"name":"plugin","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"version","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]}],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.352669Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.352677Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.353022Z[0m [34mDEBUG[0m Rendered class 'ToolchainPluginConfig': /// Configures an individual toolchain.
class ToolchainPluginConfig {
  ///
  /// Examples:
  /// - `new Mapping<String, Any> {}`
  config: Mapping<String, Any> = new Mapping {}
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  disabled: Boolean = false
  plugin: String?  version: String?}

[2m2025-05-30T15:38:29.353046Z[0m [34mDEBUG[0m Rendering type 'ProjectToolchainEntry': kind=TypeAlias, properties=0, enum_values=Some("Null | Boolean | ToolchainPluginConfig")
[2m2025-05-30T15:38:29.353067Z[0m [34mDEBUG[0m Serialized PklType 'ProjectToolchainEntry': {"name":"ProjectToolchainEntry","documentation":null,"kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"Null | Boolean | ToolchainPluginConfig"}
[2m2025-05-30T15:38:29.353105Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.353129Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.353154Z[0m [34mDEBUG[0m Rendered class 'ProjectToolchainEntry': typealias ProjectToolchainEntry = Null | Boolean | ToolchainPluginConfig

[2m2025-05-30T15:38:29.353162Z[0m [34mDEBUG[0m Rendering type 'ProjectToolchainConfig': kind=Class, properties=7, enum_values=None
[2m2025-05-30T15:38:29.353203Z[0m [34mDEBUG[0m Serialized PklType 'ProjectToolchainConfig': {"name":"ProjectToolchainConfig","documentation":"Overrides top-level toolchain settings, scoped to this project.","kind":"Class","properties":[{"name":"bun","type_name":"ProjectToolchainCommonToolConfig?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"default","type_name":"String | Listing<String>?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"deno","type_name":"ProjectToolchainCommonToolConfig?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"node","type_name":"ProjectToolchainCommonToolConfig?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"plugins","type_name":"Mapping<String, (Boolean | ToolchainPluginConfig)?>","documentation":null,"optional":false,"default":"new Mapping {}","constraints":[],"examples":["new Mapping<String, (Boolean | ToolchainPluginConfig)?> {}"]},{"name":"python","type_name":"ProjectToolchainCommonToolConfig?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"rust","type_name":"ProjectToolchainCommonToolConfig?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]}],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.353809Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.353892Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.354467Z[0m [34mDEBUG[0m Rendered class 'ProjectToolchainConfig': /// Overrides top-level toolchain settings, scoped to this project.
class ProjectToolchainConfig {
  bun: ProjectToolchainCommonToolConfig?  default: String | Listing<String>?  deno: ProjectToolchainCommonToolConfig?  node: ProjectToolchainCommonToolConfig?  ///
  /// Examples:
  /// - `new Mapping<String, (Boolean | ToolchainPluginConfig)?> {}`
  plugins: Mapping<String, (Boolean | ToolchainPluginConfig)?> = new Mapping {}
  python: ProjectToolchainCommonToolConfig?  rust: ProjectToolchainCommonToolConfig?}

[2m2025-05-30T15:38:29.355119Z[0m [34mDEBUG[0m Rendering type 'ProjectType': kind=TypeAlias, properties=0, enum_values=Some("\"application\" | \"automation\" | \"configuration\" | \"library\" | \"scaffolding\" | \"tool\" | \"unknown\"")
[2m2025-05-30T15:38:29.355256Z[0m [34mDEBUG[0m Serialized PklType 'ProjectType': {"name":"ProjectType","documentation":"The type of project, for categorizing.","kind":"TypeAlias","properties":[],"abstract_type":false,"extends":[],"enum_values":"\"application\" | \"automation\" | \"configuration\" | \"library\" | \"scaffolding\" | \"tool\" | \"unknown\""}
[2m2025-05-30T15:38:29.355419Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.355473Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.355540Z[0m [34mDEBUG[0m Rendered class 'ProjectType': /// The type of project, for categorizing.
typealias ProjectType = "application" | "automation" | "configuration" | "library" | "scaffolding" | "tool" | "unknown"

[2m2025-05-30T15:38:29.355558Z[0m [34mDEBUG[0m Rendering type 'ProjectWorkspaceInheritedTasksConfig': kind=Class, properties=3, enum_values=None
[2m2025-05-30T15:38:29.355623Z[0m [34mDEBUG[0m Serialized PklType 'ProjectWorkspaceInheritedTasksConfig': {"name":"ProjectWorkspaceInheritedTasksConfig","documentation":"Controls how tasks are inherited.","kind":"Class","properties":[{"name":"exclude","type_name":"Listing<String>","documentation":null,"optional":false,"default":"new Listing {}","constraints":[],"examples":["new Listing<String> {}","new Listing { \"item1\"; \"item2\" }"]},{"name":"include","type_name":"Listing<String>?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"rename","type_name":"Mapping<String, String>","documentation":null,"optional":false,"default":"new Mapping {}","constraints":[],"examples":["new Mapping<String, String> {}"]}],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.355985Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.356036Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.356318Z[0m [34mDEBUG[0m Rendered class 'ProjectWorkspaceInheritedTasksConfig': /// Controls how tasks are inherited.
class ProjectWorkspaceInheritedTasksConfig {
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  exclude: Listing<String> = new Listing {}
  include: Listing<String>?  ///
  /// Examples:
  /// - `new Mapping<String, String> {}`
  rename: Mapping<String, String> = new Mapping {}
}

[2m2025-05-30T15:38:29.356372Z[0m [34mDEBUG[0m Rendering type 'ProjectWorkspaceConfig': kind=Class, properties=1, enum_values=None
[2m2025-05-30T15:38:29.356407Z[0m [34mDEBUG[0m Serialized PklType 'ProjectWorkspaceConfig': {"name":"ProjectWorkspaceConfig","documentation":"Overrides top-level workspace settings, scoped to this project.","kind":"Class","properties":[{"name":"inheritedTasks","type_name":"ProjectWorkspaceInheritedTasksConfig","documentation":"Controls how tasks are inherited.","optional":false,"default":null,"constraints":[],"examples":[]}],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.356480Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.356512Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.356643Z[0m [34mDEBUG[0m Rendered class 'ProjectWorkspaceConfig': /// Overrides top-level workspace settings, scoped to this project.
class ProjectWorkspaceConfig {
/// Controls how tasks are inherited.

  inheritedTasks: ProjectWorkspaceInheritedTasksConfig}

[2m2025-05-30T15:38:29.356692Z[0m [34mDEBUG[0m Rendering type 'ProjectConfig': kind=Class, properties=16, enum_values=None
[2m2025-05-30T15:38:29.356809Z[0m [34mDEBUG[0m Serialized PklType 'ProjectConfig': {"name":"ProjectConfig","documentation":"Configures information and tasks for a project.\nDocs: https://moonrepo.dev/docs/config/project","kind":"Class","properties":[{"name":"$schema","type_name":"String","documentation":null,"optional":true,"default":null,"constraints":[],"examples":["\"example\""]},{"name":"dependsOn","type_name":"Listing<String | DependencyConfig>","documentation":null,"optional":false,"default":"new Listing {}","constraints":[],"examples":["new Listing<String | DependencyConfig> {}"]},{"name":"docker","type_name":"ProjectDockerConfig","documentation":"Configures our Docker integration.","optional":false,"default":null,"constraints":[],"examples":[]},{"name":"env","type_name":"Mapping<String, String>","documentation":null,"optional":false,"default":"new Mapping {}","constraints":[],"examples":["new Mapping<String, String> {}"]},{"name":"fileGroups","type_name":"Mapping<String, Listing<String>>","documentation":null,"optional":false,"default":"new Mapping {}","constraints":[],"examples":["new Mapping<String, Listing<String>> {}"]},{"name":"id","type_name":"String?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"language","type_name":"LanguageType","documentation":"Supported programming languages that each project can be written in.","optional":false,"default":null,"constraints":[],"examples":["\"bash\"","\"batch\"","\"go\""]},{"name":"owners","type_name":"OwnersConfig","documentation":"Defines ownership of source code within the current project, by mapping\nfile paths and globs to owners. An owner is either a user, team, or group.","optional":false,"default":null,"constraints":[],"examples":[]},{"name":"platform","type_name":"PlatformType?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"project","type_name":"ProjectMetadataConfig?","documentation":null,"optional":false,"default":null,"constraints":[],"examples":[]},{"name":"stack","type_name":"StackType","documentation":"The technology stack of the project, for categorizing.","optional":false,"default":null,"constraints":[],"examples":["\"backend\"","\"frontend\"","\"infrastructure\""]},{"name":"tags","type_name":"Listing<String>","documentation":null,"optional":false,"default":"new Listing {}","constraints":[],"examples":["new Listing<String> {}","new Listing { \"item1\"; \"item2\" }"]},{"name":"tasks","type_name":"Mapping<String, TaskConfig>","documentation":null,"optional":false,"default":"new Mapping {}","constraints":[],"examples":["new Mapping<String, TaskConfig> {}"]},{"name":"toolchain","type_name":"ProjectToolchainConfig","documentation":"Overrides top-level toolchain settings, scoped to this project.","optional":false,"default":null,"constraints":[],"examples":[]},{"name":"type","type_name":"ProjectType","documentation":"The type of project, for categorizing.","optional":false,"default":null,"constraints":[],"examples":["\"application\"","\"automation\"","\"configuration\""]},{"name":"workspace","type_name":"ProjectWorkspaceConfig","documentation":"Overrides top-level workspace settings, scoped to this project.","optional":false,"default":null,"constraints":[],"examples":[]}],"abstract_type":false,"extends":[],"enum_values":null}
[2m2025-05-30T15:38:29.357051Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.357091Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.357844Z[0m [34mDEBUG[0m Rendered class 'ProjectConfig': /// Configures information and tasks for a project.
/// Docs: https://moonrepo.dev/docs/config/project
class ProjectConfig {
  ///
  /// Examples:
  /// - `"example"`
  $schema: (String)?  ///
  /// Examples:
  /// - `new Listing<String | DependencyConfig> {}`
  dependsOn: Listing<String | DependencyConfig> = new Listing {}
/// Configures our Docker integration.

  docker: ProjectDockerConfig  ///
  /// Examples:
  /// - `new Mapping<String, String> {}`
  env: Mapping<String, String> = new Mapping {}
  ///
  /// Examples:
  /// - `new Mapping<String, Listing<String>> {}`
  fileGroups: Mapping<String, Listing<String>> = new Mapping {}
  id: String?/// Supported programming languages that each project can be written in.

  ///
  /// Examples:
  /// - `"bash"`
  /// - `"batch"`
  /// - `"go"`
  language: LanguageType/// Defines ownership of source code within the current project, by mapping
/// file paths and globs to owners. An owner is either a user, team, or group.

  owners: OwnersConfig  platform: PlatformType?  project: ProjectMetadataConfig?/// The technology stack of the project, for categorizing.

  ///
  /// Examples:
  /// - `"backend"`
  /// - `"frontend"`
  /// - `"infrastructure"`
  stack: StackType  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  tags: Listing<String> = new Listing {}
  ///
  /// Examples:
  /// - `new Mapping<String, TaskConfig> {}`
  tasks: Mapping<String, TaskConfig> = new Mapping {}
/// Overrides top-level toolchain settings, scoped to this project.

  toolchain: ProjectToolchainConfig/// The type of project, for categorizing.

  ///
  /// Examples:
  /// - `"application"`
  /// - `"automation"`
  /// - `"configuration"`
  type: ProjectType/// Overrides top-level workspace settings, scoped to this project.

  workspace: ProjectWorkspaceConfig}

[2m2025-05-30T15:38:29.359324Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.359412Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.359532Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.359572Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.359715Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.359753Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.360150Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.360210Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.360292Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.360303Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.360490Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.360526Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.360700Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.360756Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.360991Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.361061Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.361173Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.361218Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.361336Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.361387Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.361786Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.361870Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.362013Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.362065Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.362480Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.362538Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.362614Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.362643Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.362726Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.362769Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.363096Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.363174Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.363268Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.363304Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.363400Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.363448Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.363544Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.363594Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.363690Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.363742Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.363839Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.363887Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.363985Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.364043Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.364140Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.364190Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.364376Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.364428Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.365855Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.365954Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.366082Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.366121Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.366265Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.366319Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.367274Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.367382Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.367507Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.367559Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.367725Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.367784Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.367899Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.367949Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.368296Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.368360Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.368496Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.368552Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.368989Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'TypeAlias'
[2m2025-05-30T15:38:29.369045Z[0m [34mDEBUG[0m is_typealias_helper: result = true
[2m2025-05-30T15:38:29.369154Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.369171Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.369426Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.369496Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.369764Z[0m [34mDEBUG[0m is_typealias_helper: checking kind = 'Class'
[2m2025-05-30T15:38:29.369971Z[0m [34mDEBUG[0m is_typealias_helper: result = false
[2m2025-05-30T15:38:29.379906Z[0m [32m INFO[0m Generated: test-output/project.pkl
