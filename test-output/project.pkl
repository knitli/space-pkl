//! Moon Configuration Schema for Pkl
//!
//! Generated by space-pkl v0.1.0
//! Source: https://github.com/knitli/space-pkl
//! Moon: https://github.com/moonrepo/moon
//!
//! This schema provides type-safe configuration templates for Moon workspace management.
//
//! (c) 2025 Stash AI Inc (knitli)
//!   - Created by Adam Poulemanos ([@bashandbone](https://github.com/bashandbone))
//! Licensed under the [Plain MIT License](https://plainlicense.org/licenses/permissive/mit/)
//!

/// Moon project configuration schema
///
/// ## Example
///
/// ```pkl
/// import "Project.pkl"
///
/// config: Project = new {
/// // Add your configuration here
/// }
/// ```
module Project


/// The scope and or relationship of the dependency.
typealias DependencyScope = "build" | "development" | "peer" | "production" | "root"

/// The source where the dependency comes from. Either explicitly
/// defined in configuration, or implicitly derived from source files.
typealias DependencySource = "explicit" | "implicit"

/// Expanded information about a project dependency.
class DependencyConfig {
  ///
  /// Examples:
  /// - `"example"`
  id: String/// The scope and or relationship of the dependency.

  ///
  /// Examples:
  /// - `"build"`
  /// - `"development"`
  /// - `"peer"`
  scope: DependencyScope/// The source where the dependency comes from. Either explicitly
/// defined in configuration, or implicitly derived from source files.

  ///
  /// Examples:
  /// - `"explicit"`
  /// - `"implicit"`
  source: DependencySource  via: String?}

/// Expanded information about a project dependency.
typealias ProjectDependsOn = String | DependencyConfig

/// Configures `Dockerfile` generation.
class ProjectDockerFileConfig {
  buildTask: String?  image: String?  startTask: String?}

/// Configures aspects of the Docker scaffolding process.
class ProjectDockerScaffoldConfig {
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  include: Listing<String> = new Listing {}
}

/// Configures our Docker integration.
class ProjectDockerConfig {
/// Configures `Dockerfile` generation.

  file: ProjectDockerFileConfig/// Configures aspects of the Docker scaffolding process.

  scaffold: ProjectDockerScaffoldConfig}

/// Supported programming languages that each project can be written in.
typealias LanguageType = "bash" | "batch" | "go" | "javascript" | "php" | "python" | "ruby" | "rust" | "typescript" | "unknown"

/// A mapping of file paths and file globs to owners.
typealias OwnersPaths = Listing<String> | Mapping<String, Listing<String>>

/// Defines ownership of source code within the current project, by mapping
/// file paths and globs to owners. An owner is either a user, team, or group.
class OwnersConfig {
  ///
  /// Examples:
  /// - `new Mapping<String, Listing<String>> {}`
  customGroups: Mapping<String, Listing<String>> = new Mapping {}
  defaultOwner: String?  ///
  /// Examples:
  /// - `true`
  /// - `false`
  optional: Boolean = false
/// A mapping of file paths and file globs to owners.

  paths: Listing<String> | Mapping<String, Listing<String>>  requiredApprovals: Int?}

/// Platforms that each programming language can belong to.
typealias PlatformType = "bun" | "deno" | "node" | "python" | "rust" | "system" | "unknown"

/// Expanded information about the project.
class ProjectMetadataConfig {
  channel: String?  ///
  /// Examples:
  /// - `"example"`
  description: String  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  maintainers: Listing<String> = new Listing {}
  ///
  /// Examples:
  /// - `new Mapping<String, Any> {}`
  metadata: Mapping<String, Any> = new Mapping {}
  name: String?  owner: String?}

/// The technology stack of the project, for categorizing.
typealias StackType = "backend" | "frontend" | "infrastructure" | "systems" | "unknown"

/// Configures a command to execute, and its arguments.
typealias TaskArgs = Null | String | Listing<String>

/// Expanded information about a task dependency.
class TaskDependencyConfig {
/// Configures a command to execute, and its arguments.

  args: (String | Listing<String>)?  ///
  /// Examples:
  /// - `new Mapping<String, String> {}`
  env: Mapping<String, String> = new Mapping {}
  optional: Boolean?  ///
  /// Examples:
  /// - `"example"`
  target: String}

/// Configures another task that a task depends on.
typealias TaskDependency = String | TaskDependencyConfig

typealias TaskOptionEnvFile = Boolean | String | Listing<String>

/// The strategy in which to merge a specific task option.
typealias TaskMergeStrategy = "append" | "prepend" | "preserve" | "replace"

/// The operating system in which to only run this task on.
typealias TaskOperatingSystem = "linux" | "macos" | "windows"

/// The style in which task output will be printed to the console.
typealias TaskOutputStyle = "buffer" | "buffer-only-failure" | "hash" | "none" | "stream"

/// The priority levels a task can be bucketed into.
typealias TaskPriority = "critical" | "high" | "normal" | "low"

/// A list of available shells on Unix.
typealias TaskUnixShell = "bash" | "elvish" | "fish" | "ion" | "murex" | "nu" | "pwsh" | "xonsh" | "zsh"

/// A list of available shells on Windows.
typealias TaskWindowsShell = "bash" | "elvish" | "fish" | "murex" | "nu" | "pwsh" | "xonsh"

/// Options to control task inheritance and execution.
class TaskOptionsConfig {
  affectedFiles: Boolean | String?  affectedPassInputs: Boolean?  allowFailure: Boolean?  cache: Boolean?  cacheKey: String?  cacheLifetime: String?  envFile: Boolean | String | Listing<String>?  inferInputs: Boolean?  interactive: Boolean?  internal: Boolean?  merge: TaskMergeStrategy?  mergeArgs: TaskMergeStrategy?  mergeDeps: TaskMergeStrategy?  mergeEnv: TaskMergeStrategy?  mergeInputs: TaskMergeStrategy?  mergeOutputs: TaskMergeStrategy?  mutex: String?  os: TaskOperatingSystem | Listing<TaskOperatingSystem>?  outputStyle: TaskOutputStyle?  persistent: Boolean?  priority: TaskPriority?  retryCount: Int?  runDepsInParallel: Boolean?  runFromWorkspaceRoot: Boolean?  runInCI: Boolean | String?  shell: Boolean?  timeout: Int?  unixShell: TaskUnixShell?  windowsShell: TaskWindowsShell?}

/// Preset options to inherit.
typealias TaskPreset = "server" | "watcher"

/// The type of task.
typealias TaskType = "build" | "run" | "test"

/// Configures a task to be ran within the action pipeline.
class TaskConfig {
/// Configures a command to execute, and its arguments.

  args: (String | Listing<String>)?/// Configures a command to execute, and its arguments.

  command: (String | Listing<String>)?  deps: Listing<String | TaskDependencyConfig>?  description: String?  env: Mapping<String, String>?  extends: String?  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  globalInputs: Listing<String> = new Listing {}
  inputs: Listing<String>?  local: Boolean?/// Options to control task inheritance and execution.

  options: TaskOptionsConfig  outputs: Listing<String>?/// Platforms that each programming language can belong to.

  ///
  /// Examples:
  /// - `"bun"`
  /// - `"deno"`
  /// - `"node"`
  platform: PlatformType  preset: TaskPreset?  script: String?  toolchain: String | Listing<String>  type: TaskType?}

/// Represents an unresolved version or alias that must be resolved to a fully-qualified version.
class UnresolvedVersionSpec {
}

/// Overrides top-level toolchain settings.
class ProjectToolchainCommonToolConfig {
  version: String?}

/// Strategies and protocols for locating plugins.
class PluginLocator {
}

/// Configures an individual toolchain.
class ToolchainPluginConfig {
  ///
  /// Examples:
  /// - `new Mapping<String, Any> {}`
  config: Mapping<String, Any> = new Mapping {}
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  disabled: Boolean = false
  plugin: String?  version: String?}

typealias ProjectToolchainEntry = Null | Boolean | ToolchainPluginConfig

/// Overrides top-level toolchain settings, scoped to this project.
class ProjectToolchainConfig {
  bun: ProjectToolchainCommonToolConfig?  default: String | Listing<String>?  deno: ProjectToolchainCommonToolConfig?  node: ProjectToolchainCommonToolConfig?  ///
  /// Examples:
  /// - `new Mapping<String, (Boolean | ToolchainPluginConfig)?> {}`
  plugins: Mapping<String, (Boolean | ToolchainPluginConfig)?> = new Mapping {}
  python: ProjectToolchainCommonToolConfig?  rust: ProjectToolchainCommonToolConfig?}

/// The type of project, for categorizing.
typealias ProjectType = "application" | "automation" | "configuration" | "library" | "scaffolding" | "tool" | "unknown"

/// Controls how tasks are inherited.
class ProjectWorkspaceInheritedTasksConfig {
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  exclude: Listing<String> = new Listing {}
  include: Listing<String>?  ///
  /// Examples:
  /// - `new Mapping<String, String> {}`
  rename: Mapping<String, String> = new Mapping {}
}

/// Overrides top-level workspace settings, scoped to this project.
class ProjectWorkspaceConfig {
/// Controls how tasks are inherited.

  inheritedTasks: ProjectWorkspaceInheritedTasksConfig}

/// Configures information and tasks for a project.
/// Docs: https://moonrepo.dev/docs/config/project
class ProjectConfig {
  ///
  /// Examples:
  /// - `"example"`
  $schema: (String)?  ///
  /// Examples:
  /// - `new Listing<String | DependencyConfig> {}`
  dependsOn: Listing<String | DependencyConfig> = new Listing {}
/// Configures our Docker integration.

  docker: ProjectDockerConfig  ///
  /// Examples:
  /// - `new Mapping<String, String> {}`
  env: Mapping<String, String> = new Mapping {}
  ///
  /// Examples:
  /// - `new Mapping<String, Listing<String>> {}`
  fileGroups: Mapping<String, Listing<String>> = new Mapping {}
  id: String?/// Supported programming languages that each project can be written in.

  ///
  /// Examples:
  /// - `"bash"`
  /// - `"batch"`
  /// - `"go"`
  language: LanguageType/// Defines ownership of source code within the current project, by mapping
/// file paths and globs to owners. An owner is either a user, team, or group.

  owners: OwnersConfig  platform: PlatformType?  project: ProjectMetadataConfig?/// The technology stack of the project, for categorizing.

  ///
  /// Examples:
  /// - `"backend"`
  /// - `"frontend"`
  /// - `"infrastructure"`
  stack: StackType  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  tags: Listing<String> = new Listing {}
  ///
  /// Examples:
  /// - `new Mapping<String, TaskConfig> {}`
  tasks: Mapping<String, TaskConfig> = new Mapping {}
/// Overrides top-level toolchain settings, scoped to this project.

  toolchain: ProjectToolchainConfig/// The type of project, for categorizing.

  ///
  /// Examples:
  /// - `"application"`
  /// - `"automation"`
  /// - `"configuration"`
  type: ProjectType/// Overrides top-level workspace settings, scoped to this project.

  workspace: ProjectWorkspaceConfig}


