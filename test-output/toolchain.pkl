//! Moon Configuration Schema for Pkl
//!
//! Generated by space-pkl v0.1.0
//! Source: https://github.com/knitli/space-pkl
//! Moon: https://github.com/moonrepo/moon
//!
//! This schema provides type-safe configuration templates for Moon workspace management.
//
//! (c) 2025 Stash AI Inc (knitli)
//!   - Created by Adam Poulemanos ([@bashandbone](https://github.com/bashandbone))
//! Licensed under the [Plain MIT License](https://plainlicense.org/licenses/permissive/mit/)
//!



/// Moon toolchain configuration schema
///
/// ## Example
///
/// ```pkl
/// import "Toolchain.pkl"
///
/// config: Toolchain = new {
///   // Add your configuration here
/// }
/// ```
module Toolchain


/// Formats that a `package.json` version dependency can be.

typealias NodeVersionFormat = "file" | "link" | "star" | "version" | "version-caret" | "version-tilde" | "workspace" | "workspace-caret" | "workspace-tilde"
/// Strategies and protocols for locating plugins.

class PluginLocator {
}
/// Represents an unresolved version or alias that must be resolved to a fully-qualified version.

class UnresolvedVersionSpec {
}
/// Configures and enables the Bun platform.
/// Docs: https://moonrepo.dev/docs/config/toolchain#bun

class BunConfig {
/// Formats that a `package.json` version dependency can be.

  ///
  /// Examples:
  /// - `"file"`
  /// - `"link"`
  /// - `"star"`
  dependencyVersionFormat: NodeVersionFormat
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  inferTasksFromScripts: Boolean = false
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  installArgs: Listing<String> = new Listing {}
  ///
  /// Examples:
  /// - `"example"`
  packagesRoot: (String)?
  plugin: Any
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  rootPackageOnly: Boolean = false
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  syncProjectWorkspaceDependencies: (Boolean)? = false
  version: Any}
/// Configures to a tool-specific binary to install.

class BinConfig {

  ///
  /// Examples:
  /// - `"example"`
  bin: String
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  force: Boolean = false
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  local: Boolean = false
  name: Any}
/// Configures to a tool-specific binary to install.

typealias BinEntry = String | BinConfig
/// Configures and enables the Deno platform.
/// Docs: https://moonrepo.dev/docs/config/toolchain#deno

class DenoConfig {

  ///
  /// Examples:
  /// - `new Listing<Any> {}`
  bins: Listing<Any> = new Listing {}
  ///
  /// Examples:
  /// - `"example"`
  depsFile: (String)?
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  installArgs: Listing<String> = new Listing {}
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  lockfile: Boolean = false
  plugin: Any
  version: Any}

typealias ExtendsFrom = String | Listing<String>
/// Configures how and where updates will be received.

class MoonConfig {

  ///
  /// Examples:
  /// - `"example"`
  downloadUrl: (String)?
  ///
  /// Examples:
  /// - `"example"`
  manifestUrl: (String)?}
/// Options for Bun, when used as a package manager.

class BunpmConfig {

  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  installArgs: Listing<String> = new Listing {}
  plugin: Any
  version: Any}
/// Options for npm, when used as a package manager.

class NpmConfig {

  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  installArgs: (Listing<String>)? = new Listing {}
  plugin: Any
  version: Any}
/// The available package managers for Node.js.

typealias NodePackageManager = "bun" | "npm" | "pnpm" | "yarn"
/// Options for pnpm, when used as a package manager.

class PnpmConfig {

  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  installArgs: Listing<String> = new Listing {}
  plugin: Any
  version: Any}
/// The available version managers for Node.js.

typealias NodeVersionManager = "nodenv" | "nvm"
/// Options for Yarn, when used as a package manager.

class YarnConfig {

  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  installArgs: Listing<String> = new Listing {}
  plugin: Any
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  plugins: Listing<String> = new Listing {}
  version: Any}
/// Configures and enables the Node.js platform.
/// Docs: https://moonrepo.dev/docs/config/toolchain#node

class NodeConfig {

  ///
  /// Examples:
  /// - `true`
  /// - `false`
  addEnginesConstraint: (Boolean)? = false
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  binExecArgs: Listing<String> = new Listing {}
  bun: Any
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  dedupeOnLockfileChange: (Boolean)? = false/// Formats that a `package.json` version dependency can be.

  ///
  /// Examples:
  /// - `"file"`
  /// - `"link"`
  /// - `"star"`
  dependencyVersionFormat: NodeVersionFormat
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  inferTasksFromScripts: Boolean = false/// Options for npm, when used as a package manager.

  npm: NpmConfig/// The available package managers for Node.js.

  ///
  /// Examples:
  /// - `"bun"`
  /// - `"npm"`
  /// - `"pnpm"`
  packageManager: NodePackageManager
  ///
  /// Examples:
  /// - `"example"`
  packagesRoot: (String)?
  plugin: Any
  pnpm: Any
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  rootPackageOnly: Boolean = false
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  syncPackageManagerField: (Boolean)? = false
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  syncProjectWorkspaceDependencies: (Boolean)? = false
  syncVersionManagerConfig: Any
  version: Any
  yarn: Any}
/// Configures an individual toolchain.

class ToolchainPluginConfig {

  ///
  /// Examples:
  /// - `new Mapping<String, Any> {}`
  config: Mapping<String, Any> = new Mapping {}
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  disabled: Boolean = false
  plugin: Any
  version: Any}
/// The available package managers for Python.

typealias PythonPackageManager = "pip" | "uv"

class PipConfig {

  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  installArgs: Listing<String> = new Listing {}}

class UvConfig {

  plugin: Any
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  syncArgs: Listing<String> = new Listing {}
  version: Any}

class PythonConfig {
/// The available package managers for Python.

  ///
  /// Examples:
  /// - `"pip"`
  /// - `"uv"`
  packageManager: PythonPackageManager
  pip: PipConfig
  plugin: Any
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  rootVenvOnly: Boolean = false
  uv: Any
  ///
  /// Examples:
  /// - `"example"`
  venvName: (String)?
  version: Any}
/// Configures and enables the Rust platform.
/// Docs: https://moonrepo.dev/docs/config/toolchain#rust

class RustConfig {

  ///
  /// Examples:
  /// - `new Listing<Any> {}`
  bins: Listing<Any> = new Listing {}
  binstallVersion: Any
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  components: Listing<String> = new Listing {}
  plugin: Any
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  syncToolchainConfig: Boolean = false
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  targets: Listing<String> = new Listing {}
  version: Any}
/// Configures all tools and platforms.
/// Docs: https://moonrepo.dev/docs/config/toolchain

class ToolchainConfig {

  ///
  /// Examples:
  /// - `"example"`
  $schema: (String)?
  bun: Any
  deno: Any
  extends: Any/// Configures how and where updates will be received.

  moon: MoonConfig
  node: Any
  ///
  /// Examples:
  /// - `new Mapping<String, ToolchainPluginConfig> {}`
  plugins: Mapping<String, ToolchainPluginConfig> = new Mapping {}
  python: Any
  rust: Any}

