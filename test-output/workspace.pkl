//! Moon Configuration Schema for Pkl
//!
//! Generated by space-pkl v0.1.0
//! Source: https://github.com/knitli/space-pkl
//! Moon: https://github.com/moonrepo/moon
//!
//! This schema provides type-safe configuration templates for Moon workspace management.
//
//! (c) 2025 Stash AI Inc (knitli)
//!   - Created by Adam Poulemanos ([@bashandbone](https://github.com/bashandbone))
//! Licensed under the [Plain MIT License](https://plainlicense.org/licenses/permissive/mit/)
//!



/// Moon workspace configuration schema
///
/// ## Example
///
/// ```pkl
/// import "Workspace.pkl"
///
/// config: Workspace = new {
///   // Add your configuration here
/// }
/// ```
module Workspace


/// How to order ownership rules within the generated file.

typealias CodeownersOrderBy = "file-source" | "project-name"
/// Configures code ownership rules for generating a `CODEOWNERS` file.

class CodeownersConfig {

  ///
  /// Examples:
  /// - `new Mapping<String, Listing<String>> {}`
  globalPaths: Mapping<String, Listing<String>> = new Mapping {}/// How to order ownership rules within the generated file.

  ///
  /// Examples:
  /// - `"file-source"`
  /// - `"project-name"`
  orderBy: CodeownersOrderBy
  requiredApprovals: Any
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  syncOnRun: Boolean = false}
/// Configures boundaries and constraints between projects.

class ConstraintsConfig {

  ///
  /// Examples:
  /// - `true`
  /// - `false`
  enforceProjectTypeRelationships: (Boolean)? = false
  ///
  /// Examples:
  /// - `new Mapping<String, Listing<String>> {}`
  tagRelationships: Mapping<String, Listing<String>> = new Mapping {}}
/// Configures aspects of the Docker pruning process.

class DockerPruneConfig {

  ///
  /// Examples:
  /// - `true`
  /// - `false`
  deleteVendorDirectories: (Boolean)? = false
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  installToolchainDeps: (Boolean)? = false}
/// Configures aspects of the Docker scaffolding process.

class DockerScaffoldConfig {

  ///
  /// Examples:
  /// - `true`
  /// - `false`
  copyToolchainFiles: (Boolean)? = false
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  include: Listing<String> = new Listing {}}
/// Configures our Docker integration.

class DockerConfig {
/// Configures aspects of the Docker pruning process.

  prune: DockerPruneConfig/// Configures aspects of the Docker scaffolding process.

  scaffold: DockerScaffoldConfig}
/// Configures experiments across the entire moon workspace.

class ExperimentsConfig {

  ///
  /// Examples:
  /// - `true`
  /// - `false`
  actionPipelineV2: (Boolean)? = false
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  disallowRunInCiMismatch: (Boolean)? = false
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  fasterGlobWalk: (Boolean)? = false
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  gitV2: (Boolean)? = false
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  interweavedTaskInheritance: (Boolean)? = false
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  strictProjectAliases: (Boolean)? = false
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  strictProjectIds: (Boolean)? = false
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  taskOutputBoundaries: (Boolean)? = false}

typealias ExtendsFrom = String | Listing<String>
/// Strategies and protocols for locating plugins.

class PluginLocator {
}
/// Configures an individual extension.

class ExtensionConfig {

  ///
  /// Examples:
  /// - `new Mapping<String, Any> {}`
  config: Mapping<String, Any> = new Mapping {}
  plugin: Any}
/// Configures the generator for scaffolding from templates.

class GeneratorConfig {

  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  templates: (Listing<String>)? = new Listing {}}
/// The optimization to use when hashing.

typealias HasherOptimization = "accuracy" | "performance"
/// The strategy to use when walking the file system.

typealias HasherWalkStrategy = "glob" | "vcs"
/// Configures aspects of the content hashing engine.

class HasherConfig {

  ///
  /// Examples:
  /// - `42`
  batchSize: (Int)?
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  ignoreMissingPatterns: Listing<String> = new Listing {}
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  ignorePatterns: Listing<String> = new Listing {}/// The optimization to use when hashing.

  ///
  /// Examples:
  /// - `"accuracy"`
  /// - `"performance"`
  optimization: HasherOptimization/// The strategy to use when walking the file system.

  ///
  /// Examples:
  /// - `"glob"`
  /// - `"vcs"`
  walkStrategy: HasherWalkStrategy
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  warnOnMissingInputs: (Boolean)? = false}
/// Configures how and where notifications are sent.

class NotifierConfig {

  webhookUrl: Any}
/// Toggles the state of actions within the pipeline.

typealias PipelineActionSwitch = Null | Boolean | Listing<String>
/// Configures aspects of the task runner (also known as the action pipeline).

class PipelineConfig {

  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  archivableTargets: Listing<String> = new Listing {}
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  autoCleanCache: (Boolean)? = false
  ///
  /// Examples:
  /// - `"example"`
  cacheLifetime: (String)?
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  inheritColorsForPipedTasks: (Boolean)? = false/// Toggles the state of actions within the pipeline.

  installDependencies: Any
  ///
  /// Examples:
  /// - `42`
  killProcessThreshold: (Int)?
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  logRunningCommand: Boolean = false
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  syncProjectDependencies: (Boolean)? = false/// Toggles the state of actions within the pipeline.

  syncProjects: Any
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  syncWorkspace: (Boolean)? = false}
/// Configures projects in the workspace, using both globs and explicit source paths.

class WorkspaceProjectsConfig {

  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  globs: Listing<String> = new Listing {}
  ///
  /// Examples:
  /// - `new Mapping<String, String> {}`
  sources: Mapping<String, String> = new Mapping {}}
/// Configures projects in the workspace.

typealias WorkspaceProjects = WorkspaceProjectsConfig | Listing<String> | Mapping<String, String>
/// The API format of the remote service.

typealias RemoteApi = "grpc" | "http"
/// Configures basic HTTP authentication.

class RemoteAuthConfig {

  ///
  /// Examples:
  /// - `new Mapping<String, String> {}`
  headers: Mapping<String, String> = new Mapping {}
  token: Any}
/// Supported blob compression levels for gRPC APIs.

typealias RemoteCompression = "none" | "zstd"
/// Configures the action cache (AC) and content addressable cache (CAS).

class RemoteCacheConfig {
/// Supported blob compression levels for gRPC APIs.

  ///
  /// Examples:
  /// - `"none"`
  /// - `"zstd"`
  compression: RemoteCompression
  ///
  /// Examples:
  /// - `"example"`
  instanceName: (String)?
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  verifyIntegrity: Boolean = false}
/// Configures for both server and client authentication with mTLS.

class RemoteMtlsConfig {

  ///
  /// Examples:
  /// - `true`
  /// - `false`
  assumeHttp2: Boolean = false
  ///
  /// Examples:
  /// - `"example"`
  caCert: String
  ///
  /// Examples:
  /// - `"example"`
  clientCert: String
  ///
  /// Examples:
  /// - `"example"`
  clientKey: String
  domain: Any}
/// Configures for server-only authentication with TLS.

class RemoteTlsConfig {

  ///
  /// Examples:
  /// - `true`
  /// - `false`
  assumeHttp2: Boolean = false
  ///
  /// Examples:
  /// - `"example"`
  cert: String
  domain: Any}
/// Configures the remote service, powered by the Bazel Remote Execution API.

class RemoteConfig {
/// The API format of the remote service.

  ///
  /// Examples:
  /// - `"grpc"`
  /// - `"http"`
  api: RemoteApi
  auth: Any/// Configures the action cache (AC) and content addressable cache (CAS).

  cache: RemoteCacheConfig
  host: Any
  mtls: Any
  tls: Any}
/// The format to use for generated VCS hook files.

typealias VcsHookFormat = "bash" | "native"
/// The VCS being utilized by the repository.

typealias VcsManager = "git"
/// The upstream version control provider, where the repository
/// source code is stored.

typealias VcsProvider = "bitbucket" | "github" | "gitlab" | "other"
/// Configures the version control system (VCS).

class VcsConfig {

  ///
  /// Examples:
  /// - `"example"`
  defaultBranch: (String)?/// The format to use for generated VCS hook files.

  ///
  /// Examples:
  /// - `"bash"`
  /// - `"native"`
  hookFormat: VcsHookFormat
  ///
  /// Examples:
  /// - `new Mapping<String, Listing<String>> {}`
  hooks: Mapping<String, Listing<String>> = new Mapping {}/// The VCS being utilized by the repository.

  ///
  /// Examples:
  /// - `"git"`
  manager: VcsManager/// The upstream version control provider, where the repository
/// source code is stored.

  ///
  /// Examples:
  /// - `"bitbucket"`
  /// - `"github"`
  /// - `"gitlab"`
  provider: VcsProvider
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  remoteCandidates: (Listing<String>)? = new Listing {}
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  syncHooks: Boolean = false}
/// Configures all aspects of the moon workspace.
/// Docs: https://moonrepo.dev/docs/config/workspace

class WorkspaceConfig {

  ///
  /// Examples:
  /// - `"example"`
  $schema: (String)?/// Configures code ownership rules for generating a `CODEOWNERS` file.

  codeowners: CodeownersConfig/// Configures boundaries and constraints between projects.

  constraints: ConstraintsConfig/// Configures our Docker integration.

  docker: DockerConfig/// Configures experiments across the entire moon workspace.

  experiments: ExperimentsConfig
  extends: Any
  ///
  /// Examples:
  /// - `new Mapping<String, ExtensionConfig> {}`
  extensions: Mapping<String, ExtensionConfig> = new Mapping {}/// Configures the generator for scaffolding from templates.

  generator: GeneratorConfig/// Configures aspects of the content hashing engine.

  hasher: HasherConfig/// Configures how and where notifications are sent.

  notifier: NotifierConfig/// Configures aspects of the task runner (also known as the action pipeline).

  pipeline: PipelineConfig/// Configures projects in the workspace.

  projects: Any
  ///
  /// Examples:
  /// - `true`
  /// - `false`
  telemetry: (Boolean)? = false/// Configures the remote service, powered by the Bazel Remote Execution API.

  unstable_remote: RemoteConfig/// Configures the version control system (VCS).

  vcs: VcsConfig
  versionConstraint: Any}

