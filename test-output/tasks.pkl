//! Moon Configuration Schema for Pkl
//!
//! Generated by space-pkl v0.1.0
//! Source: https://github.com/knitli/space-pkl
//! Moon: https://github.com/moonrepo/moon
//!
//! This schema provides type-safe configuration templates for Moon workspace management.
//
//! (c) 2025 Stash AI Inc (knitli)
//!   - Created by Adam Poulemanos ([@bashandbone](https://github.com/bashandbone))
//! Licensed under the [Plain MIT License](https://plainlicense.org/licenses/permissive/mit/)
//!



/// Moon tasks configuration schema
///
/// ## Example
///
/// ```pkl
/// import "Tasks.pkl"
///
/// config: Tasks = new {
///   // Add your configuration here
/// }
/// ```
module Tasks

typealias ExtendsFrom = String | Listing<String>
/// Configures a command to execute, and its arguments.

typealias TaskArgs = Null | String | Listing<String>
/// Expanded information about a task dependency.

class TaskDependencyConfig {
/// Configures a command to execute, and its arguments.

  args: Any
  ///
  /// Examples:
  /// - `new Mapping<String, String> {}`
  env: Mapping<String, String> = new Mapping {}
  optional: Any
  ///
  /// Examples:
  /// - `"example"`
  target: String}
/// Configures another task that a task depends on.

typealias TaskDependency = String | TaskDependencyConfig

typealias TaskOptionEnvFile = Boolean | String | Listing<String>
/// The strategy in which to merge a specific task option.

typealias TaskMergeStrategy = "append" | "prepend" | "preserve" | "replace"
/// The operating system in which to only run this task on.

typealias TaskOperatingSystem = "linux" | "macos" | "windows"
/// The style in which task output will be printed to the console.

typealias TaskOutputStyle = "buffer" | "buffer-only-failure" | "hash" | "none" | "stream"
/// The priority levels a task can be bucketed into.

typealias TaskPriority = "critical" | "high" | "normal" | "low"
/// A list of available shells on Unix.

typealias TaskUnixShell = "bash" | "elvish" | "fish" | "ion" | "murex" | "nu" | "pwsh" | "xonsh" | "zsh"
/// A list of available shells on Windows.

typealias TaskWindowsShell = "bash" | "elvish" | "fish" | "murex" | "nu" | "pwsh" | "xonsh"
/// Options to control task inheritance and execution.

class TaskOptionsConfig {

  affectedFiles: Any
  affectedPassInputs: Any
  allowFailure: Any
  cache: Any
  cacheKey: Any
  cacheLifetime: Any
  envFile: Any
  inferInputs: Any
  interactive: Any
  internal: Any
  merge: Any
  mergeArgs: Any
  mergeDeps: Any
  mergeEnv: Any
  mergeInputs: Any
  mergeOutputs: Any
  mutex: Any
  os: Any
  outputStyle: Any
  persistent: Any
  priority: Any
  retryCount: Any
  runDepsInParallel: Any
  runFromWorkspaceRoot: Any
  runInCI: Any
  shell: Any
  timeout: Any
  unixShell: Any
  windowsShell: Any}
/// Platforms that each programming language can belong to.

typealias PlatformType = "bun" | "deno" | "node" | "python" | "rust" | "system" | "unknown"
/// Preset options to inherit.

typealias TaskPreset = "server" | "watcher"
/// The type of task.

typealias TaskType = "build" | "run" | "test"
/// Configures a task to be ran within the action pipeline.

class TaskConfig {
/// Configures a command to execute, and its arguments.

  args: Any/// Configures a command to execute, and its arguments.

  command: Any
  deps: Any
  description: Any
  env: Any
  extends: Any
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  globalInputs: Listing<String> = new Listing {}
  inputs: Any
  local: Any/// Options to control task inheritance and execution.

  options: TaskOptionsConfig
  outputs: Any/// Platforms that each programming language can belong to.

  ///
  /// Examples:
  /// - `"bun"`
  /// - `"deno"`
  /// - `"node"`
  platform: PlatformType
  preset: Any
  script: Any
  toolchain: Any
  type: Any}
/// Configures tasks and task related settings that'll be inherited by all
/// matching projects.
/// Docs: https://moonrepo.dev/docs/config/tasks

class InheritedTasksConfig {

  ///
  /// Examples:
  /// - `"example"`
  $schema: (String)?
  extends: Any
  ///
  /// Examples:
  /// - `new Mapping<String, Listing<String>> {}`
  fileGroups: Mapping<String, Listing<String>> = new Mapping {}
  ///
  /// Examples:
  /// - `new Listing<Any> {}`
  implicitDeps: Listing<Any> = new Listing {}
  ///
  /// Examples:
  /// - `new Listing<String> {}`
  /// - `new Listing { "item1"; "item2" }`
  implicitInputs: Listing<String> = new Listing {}
  taskOptions: Any
  ///
  /// Examples:
  /// - `new Mapping<String, TaskConfig> {}`
  tasks: Mapping<String, TaskConfig> = new Mapping {}}
