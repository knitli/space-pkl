name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: linux-amd64-latest
            asset_name: space-pklr-linux-amd64
            target: x86_64-unknown-linux-gnu
          - os: linux-arm64-latest
            asset_name: space-pklr-linux-aarch64
            target: aarch64-unknown-linux-gnu
          - os: linux-musl-latest
            asset_name: space-pklr-linux-musl
            target: x86_64-unknown-linux-musl
          - os: windows-latest
            asset_name: space-pklr-windows-amd64.exe
            target: x86_64-pc-windows-msvc
          - os: macos-arm64-latest
            asset_name: space-pklr-macos-aarch64
            target: aarch64-apple-darwin
          - os: macos-amd64-latest
            asset_name: space-pklr-macos-amd64
            target: x86_64-apple-darwin

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare asset
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp target/${{ matrix.target }}/release/space-pklr.exe ${{ matrix.asset_name }}
        else
          cp target/${{ matrix.target }}/release/space-pklr ${{ matrix.asset_name }}
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: build-and-upload

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
