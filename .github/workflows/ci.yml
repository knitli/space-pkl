name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  PKL_VERSION: "0.28.2"

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.rust }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
          ${{ runner.os }}-cargo-

    - name: Install PKL CLI
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          if [[ "${{ runner.arch }}" == "ARM64" ]]; then
            PKL_ARCH="linux-aarch64"
          else
            PKL_ARCH="linux-amd64"
          fi
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
         if [[ "${{ runner.arch }}" == "ARM64" ]]; then
            PKL_ARCH="macos-aarch64"
          else
          PKL_ARCH="macos-amd64"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          PKL_ARCH="windows-amd64.exe"
        fi

        PKL_URL="https://github.com/apple/pkl/releases/download/${PKL_VERSION}/pkl-${PKL_ARCH}"
        echo "Downloading PKL from: $PKL_URL"

        if [[ "${{ runner.os }}" == "Windows" ]]; then
          curl -L -o pkl.exe "$PKL_URL"
          chmod +x pkl.exe
          echo "$PWD" >> $GITHUB_PATH
          ./pkl.exe --version
        else
          curl -L -o pkl "$PKL_URL"
          chmod +x pkl
          sudo mv pkl /usr/local/bin/
          pkl --version
        fi

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Check clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build project
      run: cargo build --verbose

    - name: Generate test schemas
      run: |
        ./target/debug/space-pkl --log-level debug generate --output test-schemas

    - name: Run unit tests
      run: cargo test --verbose --lib

    - name: Run integration tests
      run: cargo test --verbose --test '*'

    - name: Run tests with all features
      run: cargo test --all-features --verbose

    - name: Run PKL integration tests
      run: |
        # Make sure the test script is executable
        chmod +x ./scripts/run-pkl-tests.sh
        ./scripts/run-pkl-tests.sh

    - name: Test deprecation features
      run: |
        # Build debug version for testing
        cargo build

        # Make deprecation demo script executable and run it
        chmod +x ./scripts/demo-deprecation.sh
        ./scripts/demo-deprecation.sh

    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ matrix.os }}-${{ matrix.rust }}
        path: |
          target/pkl-test-reports/
          demo-output-*/**/*
        retention-days: 30

    - name: Cleanup test artifacts
      if: always()
      run: |
        # Clean up generated test files
        rm -rf demo-output-* || true
        rm -rf test-schemas/ || true
        rm -rf pkl-schemas/ || true
        rm -rf target/ || true

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Install PKL CLI
      run: |
        curl -L -o pkl 'https://github.com/apple/pkl/releases/download/0.28.2/pkl-linux-amd64'
        chmod +x pkl
        sudo mv pkl /usr/local/bin/
        pkl --version

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: lcov.info
        fail_ci_if_error: true
