#!/bin/bash
set -e

PKL_VERSION=${1:-"0.28.0"}
echo "🚀 Testing real moon configs with Pkl version $PKL_VERSION"
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    case $status in
        "SUCCESS") echo -e "${GREEN}✅ $message${NC}" ;;
        "ERROR") echo -e "${RED}❌ $message${NC}" ;;
        "WARNING") echo -e "${YELLOW}⚠️  $message${NC}" ;;
        "INFO") echo -e "${BLUE}ℹ️  $message${NC}" ;;
    esac
}

# Function to validate file content
validate_file_content() {
    local file=$1
    local expected_patterns=("${@:2}")

    if [ ! -f "$file" ]; then
        print_status "ERROR" "File $file does not exist"
        return 1
    fi

    for pattern in "${expected_patterns[@]}"; do
        if ! grep -q "$pattern" "$file"; then
            print_status "ERROR" "File $file missing expected pattern: $pattern"
            return 1
        fi
    done

    print_status "SUCCESS" "File $file validation passed"
    return 0
}

# Ensure we have the CLI built
print_status "INFO" "Building CLI tool..."
if ! cargo build --release; then
    print_status "ERROR" "Failed to build CLI tool"
    exit 1
fi

# Create test output directory
mkdir -p test_output
rm -rf test_output/* # Clean previous test results

# Test Pkl CLI availability if version specified
if [ "$PKL_VERSION" != "0.28.0" ]; then
    print_status "INFO" "Checking Pkl CLI availability for version $PKL_VERSION"
    if command -v pkl &> /dev/null; then
        PKL_ACTUAL_VERSION=$(pkl --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
        print_status "INFO" "Found Pkl CLI version: $PKL_ACTUAL_VERSION"
    else
        print_status "WARNING" "Pkl CLI not found, some tests may be limited"
    fi
fi

# Test with real moon_config examples
print_status "INFO" "Testing configuration conversions..."
for config_type in project workspace toolchain template; do
    echo ""
    print_status "INFO" "Testing $config_type configurations..."

    # Check if example file exists
    if [ -f "examples/${config_type}.yml" ]; then
        # Validate source file content first
        case $config_type in
            "project")
                validate_file_content "examples/${config_type}.yml" "language:" "type:" "tasks:"
                ;;
            "workspace")
                validate_file_content "examples/${config_type}.yml" "projects:" "vcs:"
                ;;
            "toolchain")
                validate_file_content "examples/${config_type}.yml" "node:\|rust:" "version:"
                ;;
            "template")
                validate_file_content "examples/${config_type}.yml" "title:" "variables:"
                ;;
        esac

        print_status "INFO" "Converting ${config_type}.yml to Pkl..."

        # Test conversion to Pkl (when available)
        if ./target/release/moon-config-cli convert \
            --config-type $config_type \
            --input "examples/${config_type}.yml" \
            --to pkl \
            --output "test_output/${config_type}.pkl" 2>/dev/null; then

            print_status "SUCCESS" "$config_type YAML → Pkl conversion successful"

            # Validate Pkl output
            if [ -f "test_output/${config_type}.pkl" ]; then
                # Basic Pkl syntax validation
                if grep -q "=" "test_output/${config_type}.pkl"; then
                    print_status "SUCCESS" "Generated Pkl file has valid syntax"
                else
                    print_status "WARNING" "Generated Pkl file may have syntax issues"
                fi
            fi

            print_status "INFO" "Converting ${config_type}.pkl back to YAML..."

            # Test roundtrip conversion
            if ./target/release/moon-config-cli convert \
                --config-type $config_type \
                --input "test_output/${config_type}.pkl" \
                --to yaml \
                --output "test_output/${config_type}_roundtrip.yml" 2>/dev/null; then

                print_status "SUCCESS" "$config_type Pkl → YAML roundtrip successful"

                # Validate roundtrip consistency (semantic check)
                if validate_file_content "test_output/${config_type}_roundtrip.yml" "# Generated by moon-config-cli\|language:\|type:\|projects:\|node:\|title:"; then
                    print_status "SUCCESS" "$config_type roundtrip validation passed"
                else
                    print_status "WARNING" "$config_type roundtrip may have semantic differences"
                fi
            else
                print_status "WARNING" "$config_type Pkl → YAML conversion failed (may not be implemented yet)"
            fi
        else
            print_status "WARNING" "$config_type YAML → Pkl conversion failed (may not be implemented yet)"
        fi

        # Test JSON conversion
        print_status "INFO" "Testing JSON conversion for ${config_type}..."
        if ./target/release/moon-config-cli convert \
            --config-type $config_type \
            --input "examples/${config_type}.yml" \
            --to json \
            --output "test_output/${config_type}.json" 2>/dev/null; then

            print_status "SUCCESS" "$config_type YAML → JSON conversion successful"

            # Validate JSON syntax
            if command -v jq &> /dev/null; then
                if jq empty "test_output/${config_type}.json" 2>/dev/null; then
                    print_status "SUCCESS" "Generated JSON is valid"
                else
                    print_status "ERROR" "Generated JSON is invalid"
                fi
            fi
        else
            print_status "WARNING" "$config_type JSON conversion not available"
        fi
    else
        print_status "WARNING" "Example file examples/${config_type}.yml not found, skipping..."
    fi
done

echo ""
print_status "INFO" "Testing schema generation..."

# Test schema generation
for config_type in project workspace toolchain template; do
    print_status "INFO" "Generating ${config_type} schemas..."

    # JSON Schema generation
    if ./target/release/moon-config-cli generate schema \
        --config-type $config_type \
        --format json-schema \
        --output "test_output/${config_type}_schema.json" 2>/dev/null; then

        print_status "SUCCESS" "$config_type JSON schema generated"

        # Validate JSON schema
        if command -v jq &> /dev/null; then
            if jq '.type' "test_output/${config_type}_schema.json" &>/dev/null; then
                print_status "SUCCESS" "$config_type JSON schema is valid"
            fi
        fi
    else
        print_status "WARNING" "$config_type JSON schema generation not available"
    fi

    # TypeScript definitions generation
    if ./target/release/moon-config-cli generate schema \
        --config-type $config_type \
        --format typescript \
        --output "test_output/${config_type}_schema.ts" 2>/dev/null; then

        print_status "SUCCESS" "$config_type TypeScript definitions generated"

        # Basic TypeScript syntax validation
        if grep -q "interface\|type" "test_output/${config_type}_schema.ts"; then
            print_status "SUCCESS" "$config_type TypeScript definitions have valid syntax"
        fi
    else
        print_status "WARNING" "$config_type TypeScript schema generation not available"
    fi
done

echo ""
print_status "INFO" "Testing skeleton generation..."

# Test skeleton generation
for config_type in project workspace toolchain template; do
    for format in yaml json pkl; do
        print_status "INFO" "Generating ${config_type} skeleton in ${format}..."

        if ./target/release/moon-config-cli generate skeleton \
            --config-type $config_type \
            --format $format \
            --output "test_output/${config_type}_skeleton.${format}" 2>/dev/null; then

            print_status "SUCCESS" "$config_type $format skeleton generated"

            # Validate skeleton content
            case $format in
                "yaml")
                    if validate_file_content "test_output/${config_type}_skeleton.${format}" "# Skeleton\|language:\|type:\|projects:\|node:\|title:"; then
                        print_status "SUCCESS" "$config_type YAML skeleton has valid content"
                    fi
                    ;;
                "json")
                    if command -v jq &> /dev/null; then
                        if jq empty "test_output/${config_type}_skeleton.${format}" 2>/dev/null; then
                            print_status "SUCCESS" "$config_type JSON skeleton is valid"
                        fi
                    fi
                    ;;
                "pkl")
                    if grep -q "=" "test_output/${config_type}_skeleton.${format}"; then
                        print_status "SUCCESS" "$config_type Pkl skeleton has valid syntax"
                    fi
                    ;;
            esac
        else
            print_status "WARNING" "$config_type $format skeleton generation not available"
        fi
    done
done

echo ""
print_status "INFO" "Testing CLI help and version commands..."

# Test CLI help
if ./target/release/moon-config-cli --help &>/dev/null; then
    print_status "SUCCESS" "CLI help command works"
else
    print_status "ERROR" "CLI help command failed"
fi

# Test CLI version
if ./target/release/moon-config-cli --version &>/dev/null; then
    print_status "SUCCESS" "CLI version command works"
else
    print_status "WARNING" "CLI version command not available"
fi

echo ""
print_status "INFO" "Generating test report..."

# Generate test report
cat > test_output/test_report.md << EOF
# Moon Config CLI Test Report

**Test Run:** $(date)
**Pkl Version:** $PKL_VERSION
**CLI Version:** $(./target/release/moon-config-cli --version 2>/dev/null || echo "Unknown")

## Test Results Summary

### Configuration Files Tested
$(ls examples/*.yml 2>/dev/null | wc -l) example configuration files

### Generated Files
\`\`\`
$(ls test_output/ | head -20)
...
\`\`\`

### Conversion Tests
- YAML → Pkl: $(ls test_output/*.pkl 2>/dev/null | wc -l) files
- YAML → JSON: $(ls test_output/*.json 2>/dev/null | wc -l) files
- Roundtrip: $(ls test_output/*_roundtrip.yml 2>/dev/null | wc -l) files

### Schema Generation
- JSON Schemas: $(ls test_output/*_schema.json 2>/dev/null | wc -l) files
- TypeScript Definitions: $(ls test_output/*_schema.ts 2>/dev/null | wc -l) files

### Skeleton Generation
- Generated Skeletons: $(ls test_output/*_skeleton.* 2>/dev/null | wc -l) files

EOF

print_status "SUCCESS" "Test report generated: test_output/test_report.md"

echo ""
echo "=================================================="
print_status "SUCCESS" "All real config tests completed with Pkl $PKL_VERSION"
print_status "INFO" "Check test_output/ directory for generated files and detailed results"
